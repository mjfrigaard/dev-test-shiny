[
  {
    "objectID": "materials.html",
    "href": "materials.html",
    "title": "Materials",
    "section": "",
    "text": "Code & Materials\n\n\n\n\n\n\nInstall latest version of RStudio (RStudio 2023.09.0 463 “Desert Sunflower” or later)\nAccess ALL hands-on materials by cloning the repo: https://github.com/mjfrigaard/moviesApp.git\n\n\n\n\n\nPosit Cloud has the workshop materials pre-installed: https://posit.cloud/spaces/434433/content/6827633\n\n\n\n\n\nAccess the Slido polls\n\n\n\n\n\nInstall these R packages:\n\n\npkgs &lt;- c(\"shiny\", \"shinythemes\", \"rlang\", \"ggplot2\", \n  \"devtools\",  \"logger\", \"fs\", \"rmarkdown\", \"lobstr\",\n  \"shinytest2\", \"fst\")\ninstall.packages(pkgs)"
  },
  {
    "objectID": "materials.html#local-use",
    "href": "materials.html#local-use",
    "title": "Materials",
    "section": "",
    "text": "Install latest version of RStudio (RStudio 2023.09.0 463 “Desert Sunflower” or later)\nAccess ALL hands-on materials by cloning the repo: https://github.com/mjfrigaard/moviesApp.git"
  },
  {
    "objectID": "materials.html#posit-cloud",
    "href": "materials.html#posit-cloud",
    "title": "Materials",
    "section": "",
    "text": "Posit Cloud has the workshop materials pre-installed: https://posit.cloud/spaces/434433/content/6827633"
  },
  {
    "objectID": "materials.html#slido-link",
    "href": "materials.html#slido-link",
    "title": "Materials",
    "section": "",
    "text": "Access the Slido polls"
  },
  {
    "objectID": "materials.html#packages",
    "href": "materials.html#packages",
    "title": "Materials",
    "section": "",
    "text": "Install these R packages:\n\n\npkgs &lt;- c(\"shiny\", \"shinythemes\", \"rlang\", \"ggplot2\", \n  \"devtools\",  \"logger\", \"fs\", \"rmarkdown\", \"lobstr\",\n  \"shinytest2\", \"fst\")\ninstall.packages(pkgs)"
  },
  {
    "objectID": "materials.html#accessing-code-examples",
    "href": "materials.html#accessing-code-examples",
    "title": "Materials",
    "section": "Accessing code examples",
    "text": "Accessing code examples\nTo follow along, change the branch in the Git pane to the corresponding Branch in the slide footer:"
  },
  {
    "objectID": "slides/addenda.html#outline",
    "href": "slides/addenda.html#outline",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Outline",
    "text": "Outline\n\n\n\nLaunching apps\n\n\nshinyApp()\nshinyAppDir()\nrunApp()\n\n\n\nDebugging\n\n\nbrowser() & observe()\nreactiveValuesToList()\n\n\n\nTests\n\n\nSnapshots\nTest mocks"
  },
  {
    "objectID": "slides/addenda.html#launching-apps-shinyapp",
    "href": "slides/addenda.html#launching-apps-shinyapp",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: shinyApp()",
    "text": "Launching apps: shinyApp()\n\nBranch: 10_launch-app\n\n\n\nWhat happens when we call shinyApp()?\n\n\n\n\n\n\n\nshinyApp() creates and launches an app defined inline (or with UI and server function arguments)\n\n\n\n\n\napp &lt;- shinyApp(\n  ui = fluidPage(), \n  server = function(input, output) {\n    \n  }\n)\n\n\n\n\n\n\n\n\n\n\nshinyApp() creates a shiny app object (shiny.appobj)\n\n\n\n\n\nstr(app)\n\n\n\n\nList of 5\n $ httpHandler     :function (req)  \n $ serverFuncSource:function ()  \n $ onStart         : NULL\n $ options         : list()\n $ appOptions      :List of 2\n  ..$ appDir       : chr \"/path/to/moviesApp\"\n  ..$ bookmarkStore: NULL\n - attr(*, \"class\")= chr \"shiny.appobj\""
  },
  {
    "objectID": "slides/addenda.html#launching-apps-shinyappdir",
    "href": "slides/addenda.html#launching-apps-shinyappdir",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: shinyAppDir()",
    "text": "Launching apps: shinyAppDir()\n\nBranch: 10_launch-app\n\n\n\nWhat happens when we call shinyAppDir()?\n\n\n\n\n\n\n\nshinyAppDir() launches an app from a directory (with an app.R or ui.R/server.R files).\n\n\n\n\n\n\nshinyAppDir(\n  appDir = \"path/to/app/\", \n  options = list())\n\n\n\n\n\n\n\n\n\n\n\nshinyAppDir() can use a returned appDir from shinyApp()\n\n\n\n\n\n\napp &lt;- shinyApp(ui = movies_ui,\n        server = movies_server)\napp$appOptions$appDir\n\n\n[1] \"path/to/moviesApp\"\n\n\nshinyAppDir(\n  appDir = app$appOptions$appDir)"
  },
  {
    "objectID": "slides/addenda.html#launching-apps-runapp",
    "href": "slides/addenda.html#launching-apps-runapp",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: runApp()",
    "text": "Launching apps: runApp()\n\nBranch: 10_launch-app\n\n\nWhat happens when we call runApp()?\n\n\n\n\n\n\nrunApp() is the most versatile way to launch your app from the IDE\n\n\n\n\n\n\nrunApp()\n\n\n\n\n\n\n\n\n\nIt will run apps from the console, stored in a directory, or with a shiny object\n\n\n\n\nrunApp(\n  appDir = \"path/to/app/\",\n  test.mode = TRUE/FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\napp &lt;- shinyApp(\n        ui = movies_ui,\n        server = movies_server)\nrunApp(appDir = app)"
  },
  {
    "objectID": "slides/addenda.html#debugging-shiny-errors",
    "href": "slides/addenda.html#debugging-shiny-errors",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Debugging Shiny errors",
    "text": "Debugging Shiny errors\n\nBranch: spec_topic-debugging-01\n\n\n\nDebugging errors in Shiny can be difficult\n\n\n\n\n\n\n\nmovies_app(run = 'p')\n\nℹ shinyViewerType set to pane\nListening on http://127.0.0.1:6588\n\n\n\n\n\n\n\nOpaque errors messages"
  },
  {
    "objectID": "slides/addenda.html#browser-and-observe",
    "href": "slides/addenda.html#browser-and-observe",
    "title": "Developing & Testing Your Shiny Application",
    "section": "browser() and observe()",
    "text": "browser() and observe()\n\nBranch: spec_topic-debugging-02\n\n\n\nWrapping browser() with observe() triggers the debugger when the observer is invalidated\n\n\n\n\n\n\nWithin the scope of observe() we can interactively examine variables\n\n\n\n\nmovies_server &lt;- function(input, output, session) {\n\n    observe({\n      browser()\n      selected_vars &lt;- mod_var_input_server(\"vars\")\n      mod_scatter_display_server(\"plot\", var_inputs = selected_vars)\n    })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ndevtools::load_all()"
  },
  {
    "objectID": "slides/addenda.html#debugger-pause-execution",
    "href": "slides/addenda.html#debugger-pause-execution",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Debugger: pause execution",
    "text": "Debugger: pause execution\n\nBranch: spec_topic-debugging-02\n\n\n\nThe debugger pauses execution of the modules in movies_server()\n\n\n\n\n\n\n\n\nCall to observe(browser())\n\n\n\n\n\n\nDebugger console"
  },
  {
    "objectID": "slides/addenda.html#debugger-execute-line-by-line",
    "href": "slides/addenda.html#debugger-execute-line-by-line",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Debugger: execute line-by-line",
    "text": "Debugger: execute line-by-line\n\nBranch: spec_topic-debugging-02\n\n\n\nExecute next line in the debugger by clicking ‘Next’ or by typing n and return/enter in Console.\n\n\n\n\n\n\n\nBrowse[1]&gt; n\n\n\n\n\n\nBrowse[2]&gt; n\n\n\n\n\n\nBrowse[2]&gt; n"
  },
  {
    "objectID": "slides/addenda.html#parentheses-or-not",
    "href": "slides/addenda.html#parentheses-or-not",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Parentheses (or not)",
    "text": "Parentheses (or not)\n\nBranch: spec_topic-debugging-02\n\n\n\nselected_vars vs. selected_vars()\n\n\n\n\n\n\n\nBrowse[2]&gt; selected_vars\n\nreactive({\n  list(y = input$y, x = input$x, z = input$z,\n    alpha = input$alpha, size = input$size,\n    plot_title = input$plot_title\n  )\n}) \n\n\n\nselected_vars without the parentheses returns the reactive() call (not the values)\n\n\n\n\nBrowse[2]&gt; selected_vars()\n\n$y\n[1] \"audience_score\"\n\n$x\n[1] \"imdb_rating\"\n\n$z\n[1] \"mpaa_rating\"\n\n$alpha\n[1] 0.5\n\n$size\n[1] 2\n\n$plot_title\n[1] \"\""
  },
  {
    "objectID": "slides/addenda.html#debugging-modules",
    "href": "slides/addenda.html#debugging-modules",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Debugging modules",
    "text": "Debugging modules\n\nBranch: spec_topic-debugging-03\n\n\n\nRepeat the process in mod_scatter_display_server()\n\n\n\n\n\n\n\nPlace browser() after moduleServer()\n\n\n\n\nmod_scatter_display_server &lt;- function(id, var_inputs) {\n  moduleServer(id, function(input, output, session) {\n    \n    observe({\n      browser()\n      # module code\n      })\n\n  })\n}\n\n\n\n\n\n\n\n\n\n\nLoad the package and run the application again\n\n\n\n\ndevtools::load_all()"
  },
  {
    "objectID": "slides/addenda.html#comparisons-waldo",
    "href": "slides/addenda.html#comparisons-waldo",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Comparisons: waldo",
    "text": "Comparisons: waldo\n\nBranch: spec_topic-debugging-03\n\n\n\nUse waldo to compare var_inputs() and inputs()\n\n\n\n\n\n\n\nBrowse[2]&gt; waldo::compare(var_inputs(), inputs())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n`names(old)`: \"y\" \"x\" \"z\"   \"alpha\" \"size\" \"plot_title\"\n`names(new)`: \"x\" \"y\" \"col\" \"alpha\" \"size\" \"plot_title\"\n\n`old$z` is a character vector ('mpaa_rating')\n`new$z` is absent\n\n`old$col` is absent\n`new$col` is a character vector ('mpaa_rating')\n\n\n\n\n\n\n\n\n\nCan you spot the error?"
  },
  {
    "objectID": "slides/addenda.html#comparisons-diffobj",
    "href": "slides/addenda.html#comparisons-diffobj",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Comparisons: diffobj",
    "text": "Comparisons: diffobj\n\nBranch: spec_topic-debugging-03\n\n\n\nUse diffobj to compare var_inputs() and inputs()\n\n\n\n\n\n\n\nBrowse[2]&gt; diffobj::diffObj(target = names(var_inputs()), \n                            current = names(inputs()))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPress ENTER to continue...\n\n\n\n\n\n\n\n\n\nCan you spot the error?"
  },
  {
    "objectID": "slides/addenda.html#step-into-a-function",
    "href": "slides/addenda.html#step-into-a-function",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Step into a function",
    "text": "Step into a function\n\nBranch: spec_topic-debugging-04\n\n\n\nStep into scatter_plot() and print the plot (before the labels and theme layer are executed)\n\n\n\n\n\n\nBrowse[1]&gt; n\n\n\nBrowse[2]&gt; s\n\n\n\n\n\n\n\n\n\n\n\nBrowse[1]&gt; n\n\n\nBrowse[3]&gt; n\n\n\nBrowse[3]&gt; plot\n\n\n\n\n\nError in ggplot2::geom_point(alpha = alpha_var, size = size_var) : \n  Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error in `.data[[NULL]]`:\n! Must subset the data pronoun with a string, not `NULL`."
  },
  {
    "objectID": "slides/addenda.html#well-placed-prints",
    "href": "slides/addenda.html#well-placed-prints",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Well-placed print()s",
    "text": "Well-placed print()s\n\nBranch: spec_topic-debugging-05\n\n\n\n\nThe debugger is a powerful tool for your arsenal, but sometimes, a well-placed print() call is the best way to understand your application’s behavior.\n\n\n\n\n\nIn standard R functions, adding a distinctive print() statement in a function lets us quickly direct output to the Console.\n\n\n\n\n\nIn Shiny functions, we can capture the values in input with reactiveValuesToList() and print() them in the UI."
  },
  {
    "objectID": "slides/addenda.html#shiny-print-calls",
    "href": "slides/addenda.html#shiny-print-calls",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Shiny print() calls",
    "text": "Shiny print() calls\n\nBranch: spec_topic-debugging-05\n\n\n\nWe can combine verbatimTextOutput(), renderPrint(), and reactiveValuesToList() to print the reactive values from modules and the UI/server functions:\n\n\n\n\n\n\nIn mod_var_input_ui()\n\n\n\nverbatimTextOutput(outputId = ns(\"vals\"))\n\n\n\n\nIn mod_var_input_server()\n\n\n\noutput$vals &lt;- renderPrint({\n  all_vals &lt;- reactiveValuesToList(x = input, \n                                   all.names = TRUE)\n  lobstr::tree(all_vals)\n})\n\n\n\n\n\n\n\n\n\n\nIn movies_ui()\n\n\n\nverbatimTextOutput(outputId = \"vals\")\n\n\n\n\nIn movies_server()\n\n\n\noutput$vals &lt;- renderPrint({\n  all_vals &lt;- reactiveValuesToList(x = input,\n                                   all.names = TRUE)\n    lobstr::tree(all_vals)\n})"
  },
  {
    "objectID": "slides/addenda.html#viewing-print-calls-in-shiny",
    "href": "slides/addenda.html#viewing-print-calls-in-shiny",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Viewing print() calls in Shiny",
    "text": "Viewing print() calls in Shiny\n\nBranch: spec_topic-debugging-05\n\n\n\nThe module’s reactive values are printed in the sidebar.\n\n\n\n\n\n\n\n\n\nmovies_app(run = 'p')"
  },
  {
    "objectID": "slides/addenda.html#viewing-print-calls-in-shiny-1",
    "href": "slides/addenda.html#viewing-print-calls-in-shiny-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Viewing print() calls in Shiny",
    "text": "Viewing print() calls in Shiny\n\nBranch: spec_topic-debugging-05\n\n\n\nThe reactive values for the app are printed in the main panel.\n\n\n\n\n\n\n\n\n\nmovies_app(run = 'p',\n           bslib = TRUE)"
  },
  {
    "objectID": "slides/addenda.html#snapshot-scenario",
    "href": "slides/addenda.html#snapshot-scenario",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Snapshot scenario",
    "text": "Snapshot scenario\n\nBranch: 12g_tests-snapshots\n\n\nAn example Feature and Scenario for a snapshot tests:\n\n\n\n\ntestthat::describe(\"Feature: Scatter Plot Points Controlled by Dropdown Menus\n     As a user creating a scatter plot,\n     I want dropdown menus to select continuous variables for the x and y axes a\n     And I want a dropdown menu to select a categorical variable for point coloration,\n     So that I can effectively visualize the relationships and categories within the data.\", code = {\n    testthat::it(\"Scenario: Change x, y, color values for plotting\n         When I launch the Scatter Plot Data Visualization\n         And I select the variable 'Audience Score' for the x-axis\n         And I select the variable 'IMDB Rating' for the y-axis\n         And I select the variable 'Critics Rating' for the color\n         Then the scatter plot should show 'Audience Score' on the x-axis\n         And the scatter plot should show 'IMDB Rating' on the y-axis\n         And the points on the scatter plot should be colored by 'Critics Rating'\", code = {\n      })\n    })"
  },
  {
    "objectID": "slides/addenda.html#visual-unit-test",
    "href": "slides/addenda.html#visual-unit-test",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Visual unit test",
    "text": "Visual unit test\n\nBranch: 12g_tests-snapshots\n\n\nvdiffr allows us to perform a ‘visual unit test’\n\n\n\n\n\n\nexpect_doppelganger() stores the expected output as an .svg file\n\n\n\n\nscatter_inputs &lt;- list(x = 'imdb_rating', \n                   y = 'audience_score', \n                   z = 'mpaa_rating', \n                   alpha = 0.5,\n                   size = 2, \n                   plot_title = 'Enter plot title')\n\nvdiffr::expect_doppelganger(\n  title = \"Initial x y z axes\", \n  fig = scatter_plot(movies, \n    x_var = scatter_inputs$x, \n    y_var = scatter_inputs$y, \n    col_var = scatter_inputs$z, \n    alpha_var = scatter_inputs$alpha, \n    size_var = scatter_inputs$size) +"
  },
  {
    "objectID": "slides/addenda.html#visual-unit-test-1",
    "href": "slides/addenda.html#visual-unit-test-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Visual unit test",
    "text": "Visual unit test\n\nBranch: 12g_tests-snapshots\n\n\nThe scenario describes a fully functional graph\n\n\n\n\n\nSo we include the labels and theme in the snapshot:\n\n\n\n\nvdiffr::expect_doppelganger(\n  title = \"Initial x y z axes\", \n  fig = scatter_plot(movies, \n    x_var = scatter_inputs$x, \n    y_var = scatter_inputs$y, \n    col_var = scatter_inputs$z, \n    alpha_var = scatter_inputs$alpha, \n    size_var = scatter_inputs$size) +\n  ggplot2::labs(\n    title = scatter_inputs$plot_title,\n    x = stringr::str_replace_all(\n        tools::toTitleCase(scatter_inputs$x),\"_\", \" \"),\n    y = stringr::str_replace_all(\n        tools::toTitleCase(scatter_inputs$y), \"_\", \" \") ) +\n  ggplot2::theme_minimal() +\n  ggplot2::theme(legend.position = \"bottom\"))"
  },
  {
    "objectID": "slides/addenda.html#example-test-snapshots-logging",
    "href": "slides/addenda.html#example-test-snapshots-logging",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test (snapshots & logging)",
    "text": "Example test (snapshots & logging)\n\nBranch: 12g_tests-snapshots\n\nThe initial test run gives us a warning about the snapshot files\n\n\n\n\n\nSnapshots\n\n\n\n\n── Warning (test-scatter_plot.R:27:5): \nScenario: Displaying the Pre-configured Initial Scatter Plot ──\nAdding new file snapshot: 'tests/testthat/_snaps/initial-x-y-z-axes.svg'\n\n── Warning (test-scatter_plot.R:71:5):\nScenario: Change x, y, color values for plotting ──\nAdding new file snapshot: 'tests/testthat/_snaps/updated-x-y-color.svg'\n[ FAIL 0 | WARN 2 | SKIP 0 | PASS 2 ]\n\n\n\n\n\n\n\n\n\n\nsvg files are stored in tests/testthat/_snaps/\n\n\n\n\ntests/testthat/_snaps/\n└── scatter_plot\n    ├── initial-x-y-z-axes.svg\n    └── updated-x-y-color.svg\n\n2 directories, 2 files"
  },
  {
    "objectID": "slides/addenda.html#example-test-snapshots-logging-1",
    "href": "slides/addenda.html#example-test-snapshots-logging-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test (snapshots & logging)",
    "text": "Example test (snapshots & logging)\n\nBranch: 12g_tests-snapshots\n\n\n\n\nSubsequent runs give more verbose output from devtools::test_active_file():\n\n\n\n\n\n\n\nStart test\n\n\n\n\nINFO [2023-10-24 12:23:56] [ START scatter_plot(movies) = snap initial x,y,z,size,alpha]\n\n\n\n\n\n\n\n\n\n\nTest ends\n\n\n\n\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]\nINFO [2023-10-24 12:23:56] [ END scatter_plot(movies) = snap initial x,y,z,size,alpha]\n\n\n\n\n\n\n\n\n\n\nTest updated values\n\n\n\n\nINFO [2023-10-24 12:23:56] [ START scatter_plot(movies) = snap updated x,y,z]\n[ FAIL 0 | WARN 0 | SKIP 0 | PASS 2 ]\nINFO [2023-10-24 12:23:57] [ END scatter_plot(movies) = snap updated x,y,z]"
  },
  {
    "objectID": "slides/addenda.html#reviewing-snapshots",
    "href": "slides/addenda.html#reviewing-snapshots",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Reviewing snapshots",
    "text": "Reviewing snapshots\n\nBranch: 12g_tests-snapshots\n\n\n\n\n\ninitial-x-y-z-axes.svg\n\n\n\n\nupdated-x-y-color.svg\n\n\n\n\n\n\nThese are test results we can share with users/shareholders."
  },
  {
    "objectID": "slides/addenda.html#example-test-with-mocking",
    "href": "slides/addenda.html#example-test-with-mocking",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test with mocking",
    "text": "Example test with mocking\n\nBranch: 12d_tests-mocks\n\n\nMocking functions can be used to substitute functions by emulating their behavior within the test scope\n\n\n\n\n\ntest_that(\n  \"Scenario: \n     Given `local_function()` behavior\n     When I ...\n     Then ...\", {\n  local_mocked_bindings(\n    local_function = function(...) 'value'\n   )\n  expect_equal(observed = x, expected = y)\n})"
  },
  {
    "objectID": "slides/addenda.html#example-function-check_installed",
    "href": "slides/addenda.html#example-function-check_installed",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example function: check_installed()",
    "text": "Example function: check_installed()\n\nBranch: 12d_tests-mocks\n\n\nAssume we have a check_installed() function that checks if a package is installed\n\n\n\n\n\n\ncheck_installed() relies on is_installed() from rlang\nrlang is already listed under Imports in the DESCRIPTION\n\n\n\n\n\ncheck_installed &lt;- function(package) {\n  if (is_installed(package)) {\n    return(invisible())\n  } else {\n    stop(\"Please install '{package}' before continuing\")\n  }\n}\n\n\n\n\n\n\n\n\nThe example above has been adapted from the package development masterclass workshop at posit::conf(2023)"
  },
  {
    "objectID": "slides/addenda.html#example-function-feature-and-scenario",
    "href": "slides/addenda.html#example-function-feature-and-scenario",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example function: feature and scenario",
    "text": "Example function: feature and scenario\n\nBranch: 12d_tests-mocks\n\n\nFeature and scenario decriptions for check_installed() might look like:\n\n\n\n\n\nFeature: Checking if an R package is installed\n\n  Scenario: Checking an uninstalled package\n    Given the R package 'foo' is not installed\n    When I call the `check_installed()` function with 'foo'\n    Then the function should raise an error with the message\n    `Please install 'foo' before continuing`\n\n\n\n\nis_installed('foo')\n## [1] FALSE\n\n\n\n\n\n\n\n\n\n\n  Scenario: Checking an installed package\n    Given the R package 'base' is installed\n    When I call the `check_installed()` function with 'base'\n    Then the function should return without any error\n\n\n\n\nis_installed('base')\n## [1] TRUE"
  },
  {
    "objectID": "slides/addenda.html#example-test-mock",
    "href": "slides/addenda.html#example-test-mock",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test mock",
    "text": "Example test mock\n\nBranch: 12d_tests-mocks\n\n\nInstead of real-time computations, mocks return predefined responses to given inputs.\n\n\n\ndescribe(\"Feature: Checking if an R package is installed\", code = {\n\n\n\n\n\n\n  describe(\"Scenario: Checking an uninstalled package\n              Given the R package 'foo' is not installed\n              When I call the `check_installed()` function with 'foo'\", code = {\n\n\n\n\n\n\n  test_that(\"Then the function should raise an error with the message\n             `Please install 'foo' before continuing`\", code = {\n\n\n\n\n\n\n\n\n      test_logger(start = \"mock is_installed\", msg = \"FALSE\")\n      local_mocked_bindings(\n        is_installed = function(package) FALSE\n      )\n      expect_error(object = check_installed(\"foo\"))\n      test_logger(end = \"mock is_installed\", msg = \"FALSE\")\n    })\n\n\n\n\nis_installed() is set to FALSE\nexpect_error() confirms the error message"
  },
  {
    "objectID": "slides/addenda.html#notes-on-mocking",
    "href": "slides/addenda.html#notes-on-mocking",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Notes on mocking",
    "text": "Notes on mocking\n\nBranch: 12d_tests-mocks\n\n\n\nThe roxygen2 documentation for check_installed() needs an @importFrom tag to import is_installed from rlang\n\n\n\n\n\n\nUsing explicit namespacing alone won’t work\n\n\n\n\n#' Check if package is installed\n#' \n#' An example function for demonstrating how to use `testthat`'s\n#' mocking functions.\n#' \n#' @param package string, name of package\n#'\n#' @return invisible \n#'\n#' @importFrom rlang is_installed\n#'\n#' @export\n#'\n#' @examples\n#' check_installed(\"foo\")\n#' check_installed(\"base\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "This site contains the materials for the R/Pharma workshop titled, Developing & Testing Your Shiny Application."
  },
  {
    "objectID": "index.html#workshop-description",
    "href": "index.html#workshop-description",
    "title": "Welcome!",
    "section": "Workshop Description",
    "text": "Workshop Description\nThis talk takes a deep dive into the world of testing shiny applications, covering strategies for determining what needs to be tested to ensure your app’s functional accuracy and reliability. Shiny’s reactive programming model requires specialized approaches to testing, distinct from traditional R package testing.\nI’ll begin by describing the application of unit, integration, and end-to-end testing in Shiny apps. Then we’ll move into the role of testing in development and highlight the need for code organization when designing your testing suite.\nThe focus then shifts to practical aspects of testing by illustrating tools like test data and fixtures. Attendees will see example tests for utility functions, modules, and tests to capture specific user interactions (and confirm the application behaves as expected).\nFinally, I will demonstrate advanced topics like test coverage, what it measures, and why 100% coverage isn’t necessarily a metric worth chasing.\nThis presentation will give R developers a toolkit of testing techniques (building a test suite, writing effective tests, and automated testing) regardless of their familiarity with Shiny."
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "Welcome!",
    "section": "About Me",
    "text": "About Me\nMartin Frigaard is a Data Visualization Engineer at Atorus."
  },
  {
    "objectID": "q-and-a.html",
    "href": "q-and-a.html",
    "title": "Zoom chat questions",
    "section": "",
    "text": "Below are responses to questions that came through the chat during the workshop. In my answer I’ve referenced the slide and/or section of Shiny App-Packages.\n\nOpening/editing .Rproj files\n\nCan someone tell [me] how to open the moviesApp.Rproj?\n\nTo view the .Rproj file in the IDE, you can use file.edit()\nfile.edit('moviesApp.Rproj')\nThis will open the file in the Source pane.\nIf you only want to view the fields in the .Rproj file, you can enter\ncat moviesApp.Rproj\nin the Terminal pane\n\n\nDependencies\n\nCan you please explain operator import part a bit more?\n\nImporting an operator isn’t always possible with the pkg:: syntax. In this case, you’d want to import the operator using:\n#' @importFrom package operator\nThis is demonstrated in the 08b_pkg-imports branch of moviesApp, and it’s covered on this slide (and this section of Shiny App-Packages)\n\nHow do you determine when to explicitly call the package name with :: vs when to use the @import ?\n\nThe best advice (in my opinion) on when to use pkg::fun() vs. @import/@importFrom is on the roxygen2 site:\n\nIf you are using just a few functions from another package, we recommending adding the package to the Imports: field of the DESCRIPTION file and calling the functions explicitly using ::, e.g., pkg::fun() If the repetition of the package name becomes annoying you can @importFrom and drop the ::\n\nThis advice refers to using @import, because it’s not advised to use @import:\n\n“It is possible, but not generally recommended to import all functions from a package with @import package. This is risky if you import functions from more than one package, because while it might be ok today, in the future the packages might end up with a function having the same name, and your users will get a warning every time your package is loaded.”\n\nThe usethis::use_package_doc() will create a R/{packagename}-package.R file to store imports/exports in.\n\nFrom a “performance” perspective do you feel like one slows down vs the other or when you want to “slim” down your app\n\nGenerally speaking, a lightweight (low-dependency) app-package means your app is less likely to break because of changes to dependencies (and out of your control).\n\nWhen possible, do you feel like base R is preferred over package dependent development?\n\nAll app-packages inherently have at least one dependency (shiny), so that’s unavoidable, but every new dependency comes with a cost. Ask yourself if the additional dependency’s value outweighs its cost of you re-writing it in base R.\nFor example, if your app uses data manipulation functions from dplyr, tidyr, and stringr, it might be worth your time to convert these to base R. But if you’re building graphs with ggplot2, re-writing this functionality is not a good use of time (ggplot2 is mature, well maintained, has an open license, and isn’t likely to introduce backward incompatible changes).\nI’ll also add that all great packages do one thing and one thing well. Examples of packages I don’t worry about including as dependencies are cli and glue because they has very few imported dependencies (you can check this by looking in their DESCRIPTION files: cli imports and glue imports)\n\n\nShiny frameworks\n\nAre you planning to contrast this package development approach with a framework (e.g., Rhino) approach?\n\nNot explicitly, but I do have this repo that contains the application from moviesApp as a golem app, a leprechaun app, and a rhino app.\n\nFrom a beginner perspective, would it be the best use of time to learn one framework over another in terms of design to best prepare an app as it becomes more complicated or how would you suggest to best future proof an app?\n\nThe approach I recommend is (you’ve probably guessed) learning how to develop R packages. golem and leprechaun were designed to streamline many of the steps covered in this workshop, which is helpful if you’re aware of the underlying functionality they’re replacing.\nFor example, golem::add_module(\"fun\", with_test = TRUE) is identical to running usethis::use_r(\"fun\") and usethis::use_test(\"fun'). The difference being you can use devtools and usethis to create an app-package without including them as dependencies.\n\nDo you have an order of learning when it comes to R Shiny vs R Packages? Like learning one before another would be more helpful or less confusing over another?\n\nThis is a fantastic question–and one that I’ve struggled with given the available resources (and the order/timing of their publication). If you’re familiar with the contents of Mastering Shiny and can develop Shiny applications outside of a package structure, I’d recommend picking an application and gradually converting it into an R Package, following the advice in R Packages, 2ed and Writing R Extensions.\nIf you’re comfortable with R packages but looking to learn Shiny, I’d start with the online documentation and Building Web Applications With Shiny course. If you’re somewhere in-between, I’d check out my book Shiny App-Packages (and let me know if there’s a topic you’d like me to cover!)\n\n\nCopy-pasting code from other packages\n\nDo you think it would be a good idea to take the function from a package manually and bring it into the development workflow for your package vs explicitly calling the function from the source package?\n\nIf by ‘manually’ you mean copy + paste the code into your R/ folder, no, I don’t think this is a good idea for multiple reasons:\n\nIt’s not clear where the code comes from (and you didn’t write it)\n\nThe author of the original function probably wrote that function to work ‘in concert’ with the other functions in that package, so it’s likely to contain functionality you don’t need (or design decisions that don’t fit your purpose).\n\n\nWhat are your thoughts about copy-pasting a function from other packages instead of loading entire package? I think area of concern for me would potentially not giving credit to original developer…I think my question also surrounds the need for dependability and it NOT to change with future updates, essentially ensuring your application works regardless of future updates to dependency packages.\n\nThis question (or a similar version) was answered above. You’re correct to be concerned about not giving credit to the original author.\nIf you’re concerned about including the version of an add-on package with your application, you can investigate using the renv package, which records, “exactly which package versions you have installed so you can recreate them."
  },
  {
    "objectID": "slides/wrkshp.html#introduction",
    "href": "slides/wrkshp.html#introduction",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Introduction",
    "text": "Introduction\n\n\nWhy are you here?\n\n\n\n\n\nComfortable building shiny apps, not as comfortable with R packages\n\n\n\n\n\nEncountered frameworks (golem, leprechaun, or rhino) and not sure which one to use\n\n\n\n\n\nComfortable building R packages, but want to build more app-packages"
  },
  {
    "objectID": "slides/wrkshp.html#agenda",
    "href": "slides/wrkshp.html#agenda",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Agenda",
    "text": "Agenda\n\n\n\nShiny stuff\n\nShiny\nPackages\nDevelopment\n\n\nPackage stuff\n\nDocumentation\nDependencies\nData\n\n\nApp-package stuff\n\nLaunch\nExternal files\nTesting"
  },
  {
    "objectID": "slides/wrkshp.html#new-shiny-app",
    "href": "slides/wrkshp.html#new-shiny-app",
    "title": "Developing & Testing Your Shiny Application",
    "section": "New Shiny app",
    "text": "New Shiny app\n\nBranch: main\n\n\n\n\n\n\nShiny apps only require two files (README.md is optional)\n\n\n\nBoilerplate app code in app.R\n\n\nmoviesApp/\n├── README.md\n├── app.R\n└── moviesApp.Rproj\n\n1 directory, 3 files"
  },
  {
    "objectID": "slides/wrkshp.html#shiny-code",
    "href": "slides/wrkshp.html#shiny-code",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Shiny code",
    "text": "Shiny code\n\nBranch: 02_movies-app\n\n\n\n\n\nSlightly more developed:\n\nUpdates to app.R\nUtility function (utils.R)\n\n\n\nmoviesApp/\n├── README.md\n├── app.R\n├── movies.RData\n├── moviesApp.Rproj\n└── utils.R\n\n1 directory, 5 files"
  },
  {
    "objectID": "slides/wrkshp.html#shiny-project-folders",
    "href": "slides/wrkshp.html#shiny-project-folders",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Shiny project folders",
    "text": "Shiny project folders\n\nBranch: 03_proj-app\n\n\n\n\n\nShiny app project folders:\n\nR/\nwww/\n\n\n\n\n\nmoviesApp/\n├── DESCRIPTION\n├── R\n│   ├── mod_scatter_display.R\n│   ├── mod_var_input.R\n│   └── utils.R\n├── README.md\n├── app.R\n├── movies.RData\n├── moviesApp.Rproj\n└── www\n    └── shiny.png\n\n3 directories, 9 files"
  },
  {
    "objectID": "slides/wrkshp.html#shiny-loadsupport",
    "href": "slides/wrkshp.html#shiny-loadsupport",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Shiny loadSupport()",
    "text": "Shiny loadSupport()\n\nBranch: 03_proj-app\n\n\n\nShiny automatically sources the files in the R/ folder and serves the external resources in www/\n\n\n\nloads any top-level supporting .R files in the R/ directory adjacent to the app.R/server.R/ui.R files - Shiny loadSupport()\n\n\n\n\nAdd images by placing your image in a folder labeled www within your Shiny app directory - Building a user interface"
  },
  {
    "objectID": "slides/wrkshp.html#description-files",
    "href": "slides/wrkshp.html#description-files",
    "title": "Developing & Testing Your Shiny Application",
    "section": "DESCRIPTION files",
    "text": "DESCRIPTION files\n\nBranch: 04_description\n\n\n\n\n\nThe DESCRIPTION file can be used to control the DisplayMode (i.e., Showcase)\n\n\nType: shiny\nTitle: movies app\nAuthor: John Smith\nDisplayMode: Showcase"
  },
  {
    "objectID": "slides/wrkshp.html#description-fields",
    "href": "slides/wrkshp.html#description-fields",
    "title": "Developing & Testing Your Shiny Application",
    "section": "DESCRIPTION fields",
    "text": "DESCRIPTION fields\n\nBranch: 04_description\n\n\n\n\n\n\n\n‘The Package, Version, License, Description, Title, Author, and Maintainer fields are mandatory.’ - Writing R Extensions\n\n\n\n\nPackage: moviesApp\nTitle: movies app\nVersion: 0.0.0.9000\nAuthor: John Smith [aut, cre]\nMaintainer: John Smith &lt;John.Smith@email.io&gt;\nDescription: A movie-review shiny application.\nLicense: GPL-3"
  },
  {
    "objectID": "slides/wrkshp.html#rproj-files",
    "href": "slides/wrkshp.html#rproj-files",
    "title": "Developing & Testing Your Shiny Application",
    "section": ".Rproj files",
    "text": ".Rproj files\n\nBranch: 05_rproj\n\n\n\n\n\nThe .Rproj file is a plain text configuration file for the Posit Workbench IDE.\n\n\n\nmoviesApp/\n├── DESCRIPTION\n├── R\n│   ├── mod_scatter_display.R\n│   ├── mod_var_input.R\n│   └── utils.R\n├── README.md\n├── app.R\n├── movies.RData\n├── moviesApp.Rproj\n└── www\n    └── shiny.png\n\n3 directories, 9 files"
  },
  {
    "objectID": "slides/wrkshp.html#shiny-project-.rproj-fields",
    "href": "slides/wrkshp.html#shiny-project-.rproj-fields",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Shiny project .Rproj fields",
    "text": "Shiny project .Rproj fields\n\nBranch: 05_rproj\n\n\n\n\n\nShiny apps built with the New Project Wizard have the following fields:\n\n\n\nVersion: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: XeLaTeX"
  },
  {
    "objectID": "slides/wrkshp.html#r-package-project-build-tools",
    "href": "slides/wrkshp.html#r-package-project-build-tools",
    "title": "Developing & Testing Your Shiny Application",
    "section": "R Package (Project build tools)",
    "text": "R Package (Project build tools)\n\nBranch: 05_rproj\n\n\n\n\n\n\nThese are accessible under:\nTools &gt; Project Options… &gt; Build Tools\n\nChange Project build tools to Package"
  },
  {
    "objectID": "slides/wrkshp.html#r-package-.rproj-fields",
    "href": "slides/wrkshp.html#r-package-.rproj-fields",
    "title": "Developing & Testing Your Shiny Application",
    "section": "R Package .Rproj fields",
    "text": "R Package .Rproj fields\n\nBranch: 05_rproj\n\n\n \n\n\nThese add the following fields to the .Rproj file:\n\n\n\nBuildType: Package\nPackageUseDevtools: Yes\nPackageInstallArgs: --no-multiarch --with-keep.source\nPackageRoxygenize: rd,collate,namespace"
  },
  {
    "objectID": "slides/wrkshp.html#creating-new-app-packages",
    "href": "slides/wrkshp.html#creating-new-app-packages",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Creating new app-packages",
    "text": "Creating new app-packages\n\nBranch: 06a_create-package\n\n\n\n\n\nCreate new Shiny app-packages (or convert Shiny projects) with usethis::create_package()\n\nAssuming it’s being called from the desired location of your new app-package:\n\n\n\n\nusethis::create_package(path = getwd())\n\n\n\n\nThis creates an app similar to the version we saw in main:\n\nnewApp/\n  ├── .Rbuildignore\n  ├── .Rproj.user/\n  ├── .gitignore\n  ├── DESCRIPTION\n  ├── NAMESPACE\n  ├── R/\n  └── newApp.Rproj"
  },
  {
    "objectID": "slides/wrkshp.html#converting-shiny-apps-fields",
    "href": "slides/wrkshp.html#converting-shiny-apps-fields",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Converting Shiny apps (fields)",
    "text": "Converting Shiny apps (fields)\n\nBranch: 06a_create-package\n\n\n\n\n\nMany of the DESCRIPTION fields inevitably require revision\n\nWe can handle this during the creation process with the fields argument\n\n\n\n\nfields = list(Package = 'moviesApp',\n       Version = '0.0.0.9000',\n       Title = 'movies app',\n       Description = 'A movie-review Shiny application.',\n       \"Authors@R\" = NULL,\n       Author = utils::person(\n          given = \"John\", \n          family = \"Smith\", \n          email = \"John.Smith@email.io\", \n          role = c(\"aut\", \"cre\")),\n        Maintainer = utils::person(\n          given = \"John\", \n          family = \"Smith\",\n          email = \"John.Smith@email.io\"),\n        License = \"GPL-3\")"
  },
  {
    "objectID": "slides/wrkshp.html#converting-shiny-apps-ide-options",
    "href": "slides/wrkshp.html#converting-shiny-apps-ide-options",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Converting Shiny apps (IDE options)",
    "text": "Converting Shiny apps (IDE options)\n\nBranch: 06a_create-package\n\n\n\n\n\ncheck_name: verifies your Shiny app-package name is valid for CRAN\n\nopen: can be set to FALSE if you don’t need Posit Workbench to open in a new session\n\n\n\n\nusethis::create_package(path = getwd(),\n  fields = list(Package = 'moviesApp',\n         Version = '0.0.0.9000',\n         Title = 'movies app',\n         Description = 'A movie-review Shiny application.',\n         \"Authors@R\" = NULL,\n         Author = utils::person(\n            given = \"John\", \n            family = \"Smith\", \n            email = \"John.Smith@email.io\", \n            role = c(\"aut\", \"cre\")),\n          Maintainer = utils::person(\n            given = \"John\", \n            family = \"Smith\",\n            email = \"John.Smith@email.io\"),\n          License = \"GPL-3\"),\n  check_name = FALSE, \n  open = FALSE)"
  },
  {
    "objectID": "slides/wrkshp.html#development-with-devtools",
    "href": "slides/wrkshp.html#development-with-devtools",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development with devtools",
    "text": "Development with devtools\n\nBranch: 06b_devtools\n\n\n\n\nload_all() is the development function you’ll use the most during package development\n\n\n\n\n\ndocument() creates the help files and writes the NAMESPACE\n\n\n\n\n\ninstall() installs a local version of your app-package"
  },
  {
    "objectID": "slides/wrkshp.html#development-load_all",
    "href": "slides/wrkshp.html#development-load_all",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development: load_all()",
    "text": "Development: load_all()\n\nBranch: 06b_devtools\n\n\n\n\n‘load_all() removes friction from the development workflow and eliminates the temptation to use workarounds that often lead to mistakes around namespace and dependency management’ - Benefits of load_all(), R Packages, 2ed\n\n\n\n\n\n\n\ndevtools::load_all()\n\n\n\nℹ Loading moviesApp\n\n\n\n\n\n\nLoad the package when anything changes in the R/ folder."
  },
  {
    "objectID": "slides/wrkshp.html#development-document",
    "href": "slides/wrkshp.html#development-document",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development: document()",
    "text": "Development: document()\n\nBranch: 06b_devtools\n\n\n\n\ndocument() writes dependencies into the NAMESPACE and creates the help files in the man/ folder\n\n\n\n\n\n\n\n\ndevtools::document()\n\n\n\n\n\nFirst time using roxygen2. Upgrading automatically...\nSetting `RoxygenNote` to \"7.2.3\"\nWarning message:\nroxygen2 requires Encoding: \"UTF-8\"\nℹ Current encoding is NA \n\n\n\n\n\n\n\n\n\n\nUpdated DESCRIPTION fields\n\n\n\n\nRoxygenNote: 7.2.3\nEncoding: UTF-8"
  },
  {
    "objectID": "slides/wrkshp.html#development-document-1",
    "href": "slides/wrkshp.html#development-document-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development: document()",
    "text": "Development: document()\n\nBranch: 06b_devtools\n\n\n\n\n\nFuture calls to document() will result in the following output:\n\n\n\n\n\n\n\n\ndevtools::document()\n\n\n\n\n\n==&gt; devtools::document(roclets = c('rd', 'collate', 'namespace'))\n\nℹ Updating moviesApp\n  documentation\nℹ Loading moviesApp\nDocumentation completed"
  },
  {
    "objectID": "slides/wrkshp.html#development-install",
    "href": "slides/wrkshp.html#development-install",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development: install()",
    "text": "Development: install()\n\nBranch: 06b_devtools\n\n\n\n\nInstall a package after the initial setup, after major changes to the code, documentation, or dependencies, and before committing or sharing.\n\n\n\n\n\n\n\n\ndevtools::install()\n\n\n\n\n\n==&gt; R CMD INSTALL --preclean --no-multiarch --with-keep.source moviesApp\n\n* installing to library ‘/path/to/pkg/R-4.2/x86_64-apple-darwin17.0’\n* installing *source* package ‘moviesApp’ ...\n** using staged installation\n** R\n** byte-compile and prepare package for lazy loading\nNo man pages found in package  ‘moviesApp’ \n** help\n*** installing help indices\n** building package indices\n** testing if installed package can be loaded from temporary location\n** testing if installed package can be loaded from final location\n** testing if installed package keeps a record of temporary installation path\n* DONE (moviesApp)"
  },
  {
    "objectID": "slides/wrkshp.html#development-check",
    "href": "slides/wrkshp.html#development-check",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Development: check()?",
    "text": "Development: check()?\n\nBranch: 06b_devtools\n\n\n\ndevtools::check() performs a series of checks to ensure a package meets the standards set by CRAN\n\n\n\n\n\n\nConsider check() like ‘quality control’ for:\n\nDocumentation\n\nNAMESPACE dependencies\n\nUnnecessary or non-standard folders and files\n\netc.\n\n\n\n\n\n\nR Packages recommends using check() often, but I agree with the advice in Mastering Shiny on using check() with app-packages,\n\n“I don’t recommend that you [call check()] the first time, the second time, or even the third time you try out the package structure. Instead, I recommend that you get familiar with the basic structure and workflow before you take the next step to make a fully compliant package.”"
  },
  {
    "objectID": "slides/wrkshp.html#documentation-roxygen2",
    "href": "slides/wrkshp.html#documentation-roxygen2",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Documentation: roxygen2",
    "text": "Documentation: roxygen2\n\nBranch: 07_roxygen2\n\n\n\n\n\nEach function needs:\n\n@title, @description, @param(s), @return, and @examples (if applicable)\n\nRegularly load and document to preview the help files\n\nload_all() & document()\n\n\n\n\nApplication functions\n\nLink modules with @seealso\n\nGroup functions with @family\n\nUse Markdown for code, emphasis, hyperlinks, etc.\nInclude any additional information in a new @section"
  },
  {
    "objectID": "slides/wrkshp.html#documentation-roxygen2-document",
    "href": "slides/wrkshp.html#documentation-roxygen2-document",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Documentation: roxygen2 & document()",
    "text": "Documentation: roxygen2 & document()\n\nBranch: 07_roxygen2\n\n\n\n\n\n\n\nman\n├── mod_scatter_display_server.Rd\n├── mod_scatter_display_ui.Rd\n├── mod_var_input_server.Rd\n├── mod_var_input_ui.Rd\n├── movies_app.Rd\n├── movies_server.Rd\n├── movies_ui.Rd\n└── scatter_plot.Rd\n\n1 directory, 8 files"
  },
  {
    "objectID": "slides/wrkshp.html#dependencies",
    "href": "slides/wrkshp.html#dependencies",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Dependencies",
    "text": "Dependencies\n\nBranch: 07_roxygen2\n\n\nWhat happens when we load, document, and install moviesApp, then try to launch the standalone app function?\n\n\n\n\n\ndevtools::load_all()\n\n\n\n\n\n\n\n\n\n\ndevtools::document()\n\n\n\n\n\n\n\n\n\n\ndevtools::install()\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(moviesApp)\nmovies_app()\n\n\nError in movies_app() : could not find function \"movies_app\""
  },
  {
    "objectID": "slides/wrkshp.html#dependencies-exports",
    "href": "slides/wrkshp.html#dependencies-exports",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Dependencies: exports",
    "text": "Dependencies: exports\n\nBranch: 08a_pkg-exports\n\n\nHow can I export movies_app() from moviesApp?\n\n\n\n\nExporting functions:\n\n\nUse @export tag from roxygen2\nName argument is optional\nRun document() to write NAMESPACE\n\n\n\n\n\n# Generated by roxygen2: do not edit by hand\n\nexport(movies_app)\nexport(scatter_plot)"
  },
  {
    "objectID": "slides/wrkshp.html#dependencies-imports",
    "href": "slides/wrkshp.html#dependencies-imports",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Dependencies: imports",
    "text": "Dependencies: imports\n\nBranch: 08b_pkg-imports\n\n\n\n\n\nAdd the package name to the Imports field in the DESCRIPTION\n\n\n\n\nusethis::use_package('pkg')\n\n\n\n\n\n\n\n\nUse a ‘fully qualified variable reference’ in the code below R/\n\n\n\n\npkg::fun()\n\n\n\n\n\n\n\n\n\nUse @importFrom if an object can’t be imported with :: (i.e., an operator)\n\n\n\n\n#' @importFrom rlang .data\n\n\n\n\n\n\n\n\n\nUse the @import tag if your code uses a lot of functions from a package\n\n\n\n\n#' @import shiny"
  },
  {
    "objectID": "slides/wrkshp.html#dependencies-imports-cont.",
    "href": "slides/wrkshp.html#dependencies-imports-cont.",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Dependencies: imports cont.",
    "text": "Dependencies: imports cont.\n\nBranch: 08b_pkg-imports\n\n\n\n\n\n\ndocument() writes the NAMESPACE (not the DESCRIPTION)\n\n\n\nAll packages in NAMESPACE must be in DESCRIPTION\n\n\n\n\n\n\n\n\nI highly recommend reading Confusion about imports in R packages, 2ed"
  },
  {
    "objectID": "slides/wrkshp.html#dependencies-recap",
    "href": "slides/wrkshp.html#dependencies-recap",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Dependencies: recap",
    "text": "Dependencies: recap\n\nBranch: 08b_pkg-imports\n\n\n\n\n\nUpdates to NAMESPACE\n\n\n\n# Generated by roxygen2: do not edit by hand\n\nexport(movies_app)\nexport(scatter_plot)\nimport(shiny)\nimportFrom(rlang,.data)\n\n\n\n\n\n\n\n\n\nUpdates to DESCRIPTION\n\n\n\nImports: \n    ggplot2,\n    rlang,\n    shiny,\n    shinythemes,\n    stringr"
  },
  {
    "objectID": "slides/wrkshp.html#data",
    "href": "slides/wrkshp.html#data",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Data",
    "text": "Data\n\nBranch: 09_data\n\n\nThere are three locations for data in your app-package:\n\n\n\n\n\n\ndata/\n\n\n\ndata-raw/\n\n\n\ninst/extdata/"
  },
  {
    "objectID": "slides/wrkshp.html#data-package-data",
    "href": "slides/wrkshp.html#data-package-data",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Data: package data",
    "text": "Data: package data\n\nBranch: 09_data\n\n\n\n\n\n\ndata/\n\n\n\nContains package data\n\n\n\n\n\n\n\n\n\n\n\n\nAccessible via namespace (i.e., pkg::data) or data() function\n\n\n\n\n\n\n\n\n\n\n\n\nAdd data files to data with usethis::use_data()\n\n\n\n\n\ndata\n  ├── movies.RData\n  └── movies.rda\n\n1 directory, 2 files"
  },
  {
    "objectID": "slides/wrkshp.html#data-raw-data-files",
    "href": "slides/wrkshp.html#data-raw-data-files",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Data: raw data files",
    "text": "Data: raw data files\n\nBranch: 09_data\n\n\n\n\n\n\ndata-raw/\n\n\n\n\n\n\n\n\n\n\n\nScripts and files used to create data in data/\n\n\n\n\n\n\n\n\n\n\n\n\nCreate data-raw files with usethis::use_data_raw()\n\n\n\n\n\n\n\n\n\n\n\n\nFor example, the scripts used to create movies.RData might look like:\n\n\n\n\n\n\ndata-raw\n  ├── all.csv\n  ├── movies.csv\n  ├── pull_rotten_data.R\n  ├── rotten.R\n  └── scrape_boxoffice.R\n\n1 directory, 5 files"
  },
  {
    "objectID": "slides/wrkshp.html#data-external-data-files",
    "href": "slides/wrkshp.html#data-external-data-files",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Data: external data files",
    "text": "Data: external data files\n\nBranch: 09_data\n\n\n\n\n\n\ninst/extdata/\n\n\n\n\n\n\n\n\n\n\n\ninst/extdata can be used for external datasets in other file formats (.csv, .sas7bdat, .txt, .xlsx, etc)\n\n\n\n\n\ninst/\n└── extdata\n    └── movies.fst\n\n2 directories, 1 file\n\n\n\n\n\n\n\n\n\n\nImport these files with the system.file() file path accessor function\n\n\n\n\n\nfst::read_fst(path = \n      system.file(\"extdata/\", \"movies.fst\", \n                  package = \"moviesApp\")\n    )"
  },
  {
    "objectID": "slides/wrkshp.html#using-system.file",
    "href": "slides/wrkshp.html#using-system.file",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Using system.file()",
    "text": "Using system.file()\n\nBranch: 09_data\n\n\n\n\n\n\nsystem.file() gives us access to the contents of our installed package\n\n\n\n“This is your package.”\n\n\n\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n├── README.md\n├── app.R\n├── data\n├── inst\n│   └── extdata\n│       └── movies.fst\n├── man\n├── moviesApp.Rproj\n└── www\n    └── shiny.png\n\n\n\n\n“This is your package, installed”\n\n\n\n├── DESCRIPTION\n├── INDEX\n├── Meta\n├── NAMESPACE\n├── R\n├── data\n├── extdata\n│   └── movies.fst\n├── help\n└── html\n\n\n\n\n\n\n\n\n“The contents of the inst/ subdirectory will be copied recursively to the installation directory.” - Writing R extensions, Package subdirectories"
  },
  {
    "objectID": "slides/wrkshp.html#launching-apps",
    "href": "slides/wrkshp.html#launching-apps",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps",
    "text": "Launching apps\n\nBranch: 10_launch-app\n\n\nThere are two common methods for launching Shiny apps:\n\n\n\n\n\nA standalone app function:\n\n\n\nmoviesApp/\n  └── R/\n      └── movies_app.R\n\n\n\nAn app.R file:\n\n\n\nmoviesApp/\n  └── app.R"
  },
  {
    "objectID": "slides/wrkshp.html#launching-apps-movies_app",
    "href": "slides/wrkshp.html#launching-apps-movies_app",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: movies_app()",
    "text": "Launching apps: movies_app()\n\nBranch: 10_launch-app\n\n\nWhat should go in the standalone app function?\n\n\n\n\n\nCheck for interactive()\n\n\n\n\nif (interactive()) { \n    # define interactive behavior\n  } else {\n    # define non-interactive behavior\n  }\n\n\n\n\n\n\n\n\n\nInclude argument for Shiny options\n\n\n\n\nmovies_app &lt;- function(options = list()) {\n    shinyApp(\n      ui = movies_ui(), \n      server = movies_server,\n      options = options\n    )\n}"
  },
  {
    "objectID": "slides/wrkshp.html#launching-apps-display_type",
    "href": "slides/wrkshp.html#launching-apps-display_type",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: display_type()",
    "text": "Launching apps: display_type()\n\nBranch: 10_launch-app\n\n\nThe display_type() is a helper function that controls where the application is launched.\n\n\n\n\n\nHas options for viewer pane, window, and browser.\n\nPrints option to the Console\n\n\n\n\ndisplay_type &lt;- function(run = \"w\") {\n  if (run == \"p\") {\n    options(shiny.launch.browser = .rs.invokeShinyPaneViewer)\n  } else if (run == \"b\") {\n    options(shiny.launch.browser = .rs.invokeShinyWindowExternal) \n  } else if (run == \"w\") {\n    options(shiny.launch.browser = .rs.invokeShinyWindowViewer) \n  } else {\n    options(shiny.launch.browser = NULL)\n  }\n    shinyViewerType &lt;- getOption('shiny.launch.browser') |&gt; \n                        attributes() |&gt; \n                        unlist() |&gt; \n                        unname()\n    cli::cli_alert_info(\"shinyViewerType set to {shinyViewerType}\")\n}"
  },
  {
    "objectID": "slides/wrkshp.html#launching-apps-movies_app-1",
    "href": "slides/wrkshp.html#launching-apps-movies_app-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: movies_app()",
    "text": "Launching apps: movies_app()\n\nBranch: 10_launch-app\n\n\nInclude display_type() if movies_app() is interactive\n\n\n\n\n\nInclude default run argument to your preference\n\n\n\n\nmovies_app &lt;- function(options = list(), run = \"p\") {\n  if (interactive()) {\n    display_type(run = run)\n  }\n    shinyApp(\n      ui = movies_ui(),\n      server = movies_server,\n      options = options\n    )\n}"
  },
  {
    "objectID": "slides/wrkshp.html#launching-apps-app.r",
    "href": "slides/wrkshp.html#launching-apps-app.r",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Launching apps: app.R",
    "text": "Launching apps: app.R\n\nBranch: 10_launch-app\n\n\n\nWhat should go in app.R?\n\n\n\n\n\n\nTurn off loadSupport()\n\nLoad package\n   \nInclude Shiny options\n\n\n\n\nwithr::with_options(new = list(shiny.autoload.r = FALSE), code = {\n  if (!interactive()) {\n    sink(stderr(), type = \"output\")\n    tryCatch(\n      expr = {\n        library(moviesApp)\n      },\n      error = function(e) {\n        pkgload::load_all()\n      }\n    )\n  } else {\n    pkgload::load_all()\n  }\n    moviesApp::movies_app(\n      options = list(test.mode = TRUE), run = 'p')\n})"
  },
  {
    "objectID": "slides/wrkshp.html#external-resources",
    "href": "slides/wrkshp.html#external-resources",
    "title": "Developing & Testing Your Shiny Application",
    "section": "External resources",
    "text": "External resources\n\nBranch: 11a_inst-www\n\n\nWe have external files referenced in our UI (i.e., in www)\n\n\n\n\n\nTo include in our app-package, we need to move www/ (and contents) into inst/\n\n\n\nPrevious location:\n├── inst/\n│   └── extdata\n│       └── movies.fst\n└── www/\n    └── shiny.png\n\n\n\nCurrent location:\ninst/\n  ├── extdata/\n  │   └── movies.fst\n  └── www/\n      └── shiny.png\n\n\n\n\n\n\nAfter loading, documenting, and installing, we can access shiny.png with system.file()"
  },
  {
    "objectID": "slides/wrkshp.html#external-files-www",
    "href": "slides/wrkshp.html#external-files-www",
    "title": "Developing & Testing Your Shiny Application",
    "section": "External files: www/",
    "text": "External files: www/\n\nBranch: 11a_inst-www\n\n\nAdding external files (formerly in www)\n\n\n\n\n\n\nIn the app UI function, include a call to addResourcePath()\n\n\n\n\n\nmovies_ui &lt;- function() {\n  addResourcePath(prefix = , \n                  directoryPath = )\n  tagList() # Additional UI code\n}\n\n\n\n\n\n\n\n\n\n\n\nUse system.file() to add the www path\n\n\n\n\n\ndirectoryPath = system.file('www', \n                    package = 'moviesApp')\n\n\n\n\n\n\n\n\n\n\n\nReference the file (without inst/)\n\n\n\n\n\nimg(src = \"www/shiny.png\")"
  },
  {
    "objectID": "slides/wrkshp.html#external-files-bslib",
    "href": "slides/wrkshp.html#external-files-bslib",
    "title": "Developing & Testing Your Shiny Application",
    "section": "External files: bslib",
    "text": "External files: bslib\n\nBranch: 11b_inst-bslib\n\n\ninst/ can store alternate images and resources\n\n\n\n\n\n\nAdd image to inst/www\n\n\n\n\n\ninst\n └── www\n      ├── bootstrap.png\n      └── shiny.png\n  \n2 directories, 2 files\n\n\n\n\n\n\n\n\n\n\n\nIn UI, addResourcePath() has already added www/\n\n\n\n\n\nimg(\"www/bootstrap.png\")\n\n\n\n\n\n\n\n\n\n\nAdd bslib argument to movies_ui()\n\n\n\n\n\nmovies_app(options = list(test.mode = TRUE), \n  run = 'p', \n  bslib = TRUE)"
  },
  {
    "objectID": "slides/wrkshp.html#external-files-dev",
    "href": "slides/wrkshp.html#external-files-dev",
    "title": "Developing & Testing Your Shiny Application",
    "section": "External files: dev",
    "text": "External files: dev\n\nBranch: 11c_inst-dev\n\n\nWe can also store entire apps in inst/\n\n\n\n\n\ninst/dev/:\n\napp.R (app file)\nimdb.png (image file)\ntidy_movies.fst (data)\n\n\n\n\n\ninst/dev\n├── app.R\n├── imdb.png\n└── tidy_movies.fst\n\n1 directory, 3 files\n\n\n\n\n\n\n\n\n\nFunctions from R/ are accessible in inst/dev/app.R\n\n\n\n\n\nmoviesApp::mod_var_input_server(\"vars\")\n\n\n\n\n\n\n\n\n\n\nWrite an alternate standalone app function\n\n\n\n\n\nggp2_movies_app(\n  options = list(test.mode = FALSE), \n  run = 'p')"
  },
  {
    "objectID": "slides/wrkshp.html#external-files-prod",
    "href": "slides/wrkshp.html#external-files-prod",
    "title": "Developing & Testing Your Shiny Application",
    "section": "External files: prod",
    "text": "External files: prod\n\nBranch: 11d_inst-prod\n\n\nApps can be deployed from a dedicated inst/ folder\n\n\n\n\n\nIn inst/prod/app/app.R\n\n\n\nshinyApp(\n  ui = moviesApp::movies_ui(bslib = TRUE), \n  server = moviesApp::movies_server)\n\n\n\n\n\ninst/\n  └── prod/\n       └── app/\n            └── app.R\n          \n3 directories, 1 file\n\n\n\n\n\n\n\n\n\nin app.R, use shinyAppDir() and system.file() to return the app object from prod/app/app.R\n\n\n\n\n\nshinyAppDir(appDir = system.file(\"prod/app\", \n                            package = \"moviesApp\"))\n\n\n\n\n\n\nApp"
  },
  {
    "objectID": "slides/wrkshp.html#test-suite",
    "href": "slides/wrkshp.html#test-suite",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test suite",
    "text": "Test suite\n\nBranch: 12a_tests-specs\n\n\nSetting up your testthat test suite:\n\n\n\n\n\n\n\n\nusethis::use_testthat(3)\n\n\n\n\n\n\n3 is ‘3rd edition’\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn the DESCRIPTION file, testthat (&gt;= 3.0.0) is listed under Suggests\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConfig/testthat/edition: 3 is also listed in the DESCRIPTION to specify the testthat edition\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA new tests/ folder is created, with a testthat/ subfolder\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe tests/testthat/testthat.R file is created"
  },
  {
    "objectID": "slides/wrkshp.html#new-tests",
    "href": "slides/wrkshp.html#new-tests",
    "title": "Developing & Testing Your Shiny Application",
    "section": "New tests",
    "text": "New tests\n\nBranch: 12a_tests-specs\n\n\n\nFor every .R file in R/ …\n\n\n\n\n\n\n\nR/\n└── scatter_plot.R\n\n1 directory, 1 file\n\n\n\n\n\nuse_test(\"scatter_plot\")\n\n\n\n\n\ntests/\n └── testthat/\n      └── test-scatter_plot.R\n\n1 directory, 1 file\n\n\n\n\n\n\n\n…create a test file in tests/testthat/"
  },
  {
    "objectID": "slides/wrkshp.html#test-files",
    "href": "slides/wrkshp.html#test-files",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test files",
    "text": "Test files\n\nBranch: 12a_tests-specs\n\n\n\n\n\n\ntest- files\n\n\n\n\n✔ Writing 'tests/testthat/test-scatter_plot.R'\n• Modify 'tests/testthat/test-scatter_plot.R'\n\n\n\n\n\n\n\n\n\n\ntest_that() tests\n\n\n\n\ntest_that(desc = \"multiplication works\", code = { \n \n})\n\n\n\n\n\n\n\n\n\n\nexpect_ations\n\n\n\n\nexpect_equal( \n  object = 2 * 2,  \n  expected = 4 \n  )"
  },
  {
    "objectID": "slides/wrkshp.html#running-tests",
    "href": "slides/wrkshp.html#running-tests",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Running tests",
    "text": "Running tests\n\nBranch: 12a_tests-specs\n\n\n\n\n\n\nBuild pane\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest()\n\n\n\nCtrl/Cmd + Shift + T\n\n\n\n\n\n\n\n\ntest_active_file()\n\n\n\nCtrl/Cmd + T\n\n\n\n\n\n\n\n\ntest_coverage_active_file()\n\n\n\nCtrl/Cmd + Shift + R"
  },
  {
    "objectID": "slides/wrkshp.html#app-specifications",
    "href": "slides/wrkshp.html#app-specifications",
    "title": "Developing & Testing Your Shiny Application",
    "section": "App specifications",
    "text": "App specifications\n\nBranch: 12a_tests-specs\n\n\n\n\nApplications should have some version of the following specifications:\n\n\n\n\n\n\n\nUser specifications\n\n\n\nCapture the needs and expectations of the end-user\n\n\n\n\n\n\n\n\nFeatures\n\n\n\nDescribe the high-level capabilities of the application\n\n\n\n\n\n\n\n\nFunctional requirements\n\n\n\nThe testable, specific behaviors (i.e., inputs and outputs)"
  },
  {
    "objectID": "slides/wrkshp.html#test-specifications",
    "href": "slides/wrkshp.html#test-specifications",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test specifications",
    "text": "Test specifications\n\nBranch: 12a_tests-specs\n\n\n\n\nA traceability matrix is a table that ‘traces’ the user specifications to features and functional requirements (and the tests they give rise to)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUser Specifications\nFeatures\nRequirements\nTests\n\n\nUS1: Shiny App Scatter Plot Data Visualization for Movie Review Explorer\nF1.1: IMDB and Rotten Tomatoes data with continuous (i.e., scores) and categorical (i.e., mpaa) variables.\nFR 1.1: The app should display movie review data from IMDB and Rotten Tomatoes containing both continuous and categorical variables stored in a tabular format.\n?"
  },
  {
    "objectID": "slides/wrkshp.html#behavior-driven-development-tests",
    "href": "slides/wrkshp.html#behavior-driven-development-tests",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Behavior-driven development tests",
    "text": "Behavior-driven development tests\n\nBranch: 12a_tests-specs\n\n\nIn Behavior-driven development (BDD), requirements are written plain language ‘feature files’ using a series of keywords:\n\n\n\n\nFeature: &lt; High-level description of capability &gt;\n\n  Background: &lt; Steps or conditions that exist before each scenario &gt;\n    Given &lt; Initial context or preconditions for the scenario &gt;\n    \n  Scenario: &lt; Steps outlining a concrete example to illustrate the feature &gt;\n    When\n    And\n    Then"
  },
  {
    "objectID": "slides/wrkshp.html#describe-features-background",
    "href": "slides/wrkshp.html#describe-features-background",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Describe features & background",
    "text": "Describe features & background\n\nBranch: 12a_tests-specs\n\n\n\nThe Feature and Background can be included in nested testthat::describe() blocks\n\n\n\n\n\ntestthat::describe(\n  \"Feature: &lt; High-level description of capability &gt;\n      As a \n      I want \n      So that\", code = {\n  \n    testthat::describe(\n      \"Background: &lt; Preconditions &gt;\n         Given &lt; Initial context for scenario &gt;\", code = { \n    \n  })\n})"
  },
  {
    "objectID": "slides/wrkshp.html#write-a-test-for-it",
    "href": "slides/wrkshp.html#write-a-test-for-it",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Write a test for it",
    "text": "Write a test for it\n\nBranch: 12a_tests-specs\n\n\n\nFor Scenarios, each Then keyword should have a corresponding testthat::it() or testthat::test_that()\n\n\n\n\n\ntestthat::it(\"\n  Scenario: &lt; Steps outlining a concrete example to illustrate the feature &gt;\n    Given ...\n    When ...\n    Then\", \n  code = {\n    # test code \n    testthat::expect_equal(\n      object = x, \n      expected = y)\n})"
  },
  {
    "objectID": "slides/wrkshp.html#test-fixtures",
    "href": "slides/wrkshp.html#test-fixtures",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test fixtures",
    "text": "Test fixtures\n\nBranch: 12b_tests-fixtures\n\n\n\n\nTest fixtures can be anything used to create repeatable test conditions (data, file paths, functions, etc.)\n\n\n\n\n\n\n\n\nFixtures provide a consistent, well-defined test environment\nAre removed/destroyed when the test is executed\n\n\n\n\n\n\ntests/\n  ├── testthat/\n  │   └── fixtures/                                         \n  └── testthat.R"
  },
  {
    "objectID": "slides/wrkshp.html#feature-description-for-fixture",
    "href": "slides/wrkshp.html#feature-description-for-fixture",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Feature description for fixture",
    "text": "Feature description for fixture\n\nBranch: 12b_tests-fixtures\n\n\n\nWe can use nested describe() functions to document the Feature and Background\n\n\n\n\n\n\n\n\n\ntestthat::describe(\n    \"Feature: Scatter plot data visualization\n       As a film data analyst\n       I want to explore movie review data from IMDB.com\n       So that I can analyze relationships between movie reivew metrics\",\n  code = {\n  testthat::describe(\n    \"Background:\n       Given I have data with IMDB movie reviews\n       And the data contains continuous variables like 'rating'\n       And the data contains categorical variables like 'mpaa'\",\n    code = {\n         \n      })\n    })"
  },
  {
    "objectID": "slides/wrkshp.html#give-a-concrete-scenario",
    "href": "slides/wrkshp.html#give-a-concrete-scenario",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Give a concrete scenario",
    "text": "Give a concrete scenario\n\nBranch: 12b_tests-fixtures\n\n\n\nIllustrate the test with clear Given, When, Then steps\n\n\n\n\n\n\n\n\n\ntestthat::it(\n  \"Scenario: Create scatter plot\n      Given I have launched the movie review exploration app,\n      When the scatter plot renders,\n      Then the points on the x axis should represent 'Ratings'\n      And the points on the y axis should represent 'Length'\n      And the points should be colored by 'MPAA' rating\n      And the size of the points should be set to '2'\n      And the opacity of the points should be set to '0.5'\", \n    code = {\n      \n  })"
  },
  {
    "objectID": "slides/wrkshp.html#example-fixture-data",
    "href": "slides/wrkshp.html#example-fixture-data",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example fixture: data",
    "text": "Example fixture: data\n\nBranch: 12b_tests-fixtures\n\n\n\n\n\n\ntests\n├── testthat\n│   ├── fixtures\n│   │   └── make-tidy_ggp2_movies.R\n│   └── test-scatter_plot.R\n└── testthat.R\n\n\n\n\n\nmake-tidy_ggp2_movies: code used to create a ‘tidy’ version of the ggplot2movies::movies data\n\n\n\n\n\n\n\n\n\n\ntests\n├── testthat\n│   ├── fixtures\n│   │   ├── make-tidy_ggp2_movies.R\n│   │   └── tidy_ggp2_movies.rds\n│   └── test-scatter_plot.R\n└── testthat.R\n\n\n\n\n\ntidy_ggp2_movies.rds the output dataset"
  },
  {
    "objectID": "slides/wrkshp.html#write-a-fixture-test",
    "href": "slides/wrkshp.html#write-a-fixture-test",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Write a fixture test",
    "text": "Write a fixture test\n\nBranch: 12b_tests-fixtures\n\n\n\nWrite a test using the static data test fixture\n\n\n\n\n\n\n\n\n\n  ggp2_scatter_inputs &lt;- list(x = \"rating\",\n                              y = \"length\",\n                              z = \"mpaa\",\n                              alpha = 0.75,\n                              size = 3,\n                              plot_title = \"Enter plot title\")\n  tidy_ggp2_movies &lt;- readRDS(test_path(\"fixtures\",\n                              \"tidy_ggp2_movies.rds\"))\n    app_graph &lt;- scatter_plot(tidy_ggp2_movies,\n      x_var = ggp2_scatter_inputs$x,\n      y_var = ggp2_scatter_inputs$y,\n      col_var = ggp2_scatter_inputs$z,\n      alpha_var = ggp2_scatter_inputs$alpha,\n      size_var = ggp2_scatter_inputs$size)\n    expect_true(ggplot2::is.ggplot(app_graph))"
  },
  {
    "objectID": "slides/wrkshp.html#test-helpers",
    "href": "slides/wrkshp.html#test-helpers",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test helpers",
    "text": "Test helpers\n\nBranch: 12c_tests-helpers\n\n\n\n\n“Helper files are a mighty weapon in the battle to eliminate code floating around at the top-level of test files.” Testthat helper files, R Packages, 2ed\n\n\n\n\n\n\n\n\ntests/\n  ├── testthat/\n  │   ├── fixtures/\n  │   │   ├── make-tidy_ggp2_movies.R\n  │   │   └── tidy_ggp2_movies.rds\n  │   ├── helper.R\n  │   └── test-scatter_plot.R\n  └── testthat.R\n\n\n\n\nStore test helpers in tests/testthat/helper.R files."
  },
  {
    "objectID": "slides/wrkshp.html#example-test-helper",
    "href": "slides/wrkshp.html#example-test-helper",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test helper",
    "text": "Example test helper\n\nBranch: 12c_tests-helpers\n\n\n\nConsider the inputs passed to the scatter_plot() function in the previous test:\n\n\n\n\n\n\n\nggp2_scatter_inputs &lt;- list(x = \"rating\",\n                            y = \"length\",\n                            z = \"mpaa\",\n                            alpha = 0.75,\n                            size = 3,\n                            plot_title = \"Enter plot title\")\n\n\n\n\n\nvar_inputs &lt;- function() {\n list(x = \"rating\",\n      y = \"length\",\n      z = \"mpaa\",\n      alpha = 0.75,\n      size = 3,\n      plot_title = \"Enter plot title\")\n}\n\n\n\n\n\n\n\nWe could write var_inputs() to store these values in a list"
  },
  {
    "objectID": "slides/wrkshp.html#example-test-helper-1",
    "href": "slides/wrkshp.html#example-test-helper-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Example test helper",
    "text": "Example test helper\n\nBranch: 12c_tests-helpers\n\n\n\nThis would allow us to use var_inputs() with the same ‘reactive syntax’ we use in the module server function\n\n\n\n\n\n\n\nstr(var_inputs())\n## List of 6\n##  $ x         : chr \"rating\"\n##  $ y         : chr \"length\"\n##  $ z         : chr \"mpaa\"\n##  $ alpha     : num 0.75\n##  $ size      : num 3\n##  $ plot_title: chr \"Enter plot title\"\n\n\n\n\n\napp_graph &lt;- scatter_plot(\n  tidy_ggp2_movies,\n  x_var = var_inputs()$x,\n  y_var = var_inputs()$y,\n  col_var = var_inputs()$z,\n  alpha_var = var_inputs()$alpha,\n  size_var = var_inputs()$size)\n\nexpect_true(ggplot2::is.ggplot(app_graph))\n\n\n\n\n\n\n\n\nThis removes duplicated code, but it’s not clear for the reader what var_inputs() contains or where it comes from"
  },
  {
    "objectID": "slides/wrkshp.html#test-helpers-the-dry-principle",
    "href": "slides/wrkshp.html#test-helpers-the-dry-principle",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test helpers & the DRY principle",
    "text": "Test helpers & the DRY principle\n\nBranch: 12c_tests-helpers\n\n\nIf you have repeated code in your tests, consider the following questions below before creating a helper function:\n\n\nDoes the code help explain what behavior is being tested?\n\n\n\nWould a helper make it harder to debug the test when it fails?\n\n\n\nIt’s more important that test code is obvious than DRY, because it’s more likely you’ll be dealing with this test when it fails (and you’re not likely to remember why all the top-level code is there)"
  },
  {
    "objectID": "slides/wrkshp.html#better-test-helper",
    "href": "slides/wrkshp.html#better-test-helper",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Better test helper",
    "text": "Better test helper\n\nBranch: 12c_tests-helpers\n\n\n\nmake_ggp2_inputs() creates inputs for the scatter_plot() utility function\n\n\n\n\n\n\nmake_ggp2_inputs &lt;- function() {\n  glue::glue_collapse(\"list(x = 'rating',\n     y = 'length',\n     z = 'mpaa',\n     alpha = 0.75,\n     size = 3,\n     plot_title = 'Enter plot title'\n     )\"\n  )\n}\n\n\n\n\nThis reduces the number of keystrokes per test, but doesn’t obscure the source of the values."
  },
  {
    "objectID": "slides/wrkshp.html#test-output",
    "href": "slides/wrkshp.html#test-output",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Test output",
    "text": "Test output\n\nBranch: 12c_tests-helpers\n\n\nThe logger package is great for verbose test output.\n\n\n\n\n\n\ntest_logger() can be used to log when a test starts and ends\n\n\n\n\n\ntest_logger(start = \"Test number\", \n  msg = \"Short description of functional requirement\")\n\n# test code (fixtures, helpers, etc.)\n# expectations\n\ntest_logger(end = \"Test number\", \n  msg = \"Short description of functional requirement\")\n\n\n\n\n\n\n\n\n\n\nStore common test utilities in R/:\n\n\n\nR/\n└── testthat.R"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules",
    "href": "slides/wrkshp.html#testing-modules",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules",
    "text": "Testing modules\n\nBranch: 12d_tests-modules\n\n\nWe want tests for specific module behaviors (i.e., communicating or transferring values)\n\n\n\n\n“Are the user inputs from the variable input module being passed to scatter-plot display module?”\n\n\n\n\n\nmovies_server &lt;- function(input, output, session) {\n\n      selected_vars &lt;- mod_var_input_server(\"vars\")\n\n      mod_scatter_display_server(\"plot\", var_inputs = selected_vars)\n      \n}"
  },
  {
    "objectID": "slides/wrkshp.html#module-behaviors",
    "href": "slides/wrkshp.html#module-behaviors",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Module behaviors",
    "text": "Module behaviors\n\nBranch: 12d_tests-modules\n\n\nWhat scenarios call for a snapshot test?\n\n\n\n\n  testthat::it(\"Scenario: Scatter plot initial x, y, color values \n                   Given the movie review application is loaded\n                   When I view the initial scatter plot\n                   Then the scatter plot should show 'IMDB Rating' on the x-axis\n                   And the scatter plot should show 'Audience Score' on the y-axis\n                   And the points on the scatter plot should be colored by 'MPAA Rating'\n                   And the size of the points should be set to '2'\n                   And the opacity of the points should be set to '0.5'\", code = {\n\n\n\n\n\n\n  testthat::it(\"Scenario: Change x, y, color values for plotting\n                  Given the movie review application is loaded\n                  When I choose the variable 'IMDB number of votes' for the x-axis\n                  And I choose the variable 'Critics Score' for the y-axis\n                  And I choose the variable 'Genre' for the color\n                  Then the scatter plot should show 'IMDB number of votes' on the x-axis\n                  And the scatter plot should show 'Critics Score' on the y-axis\n                  And the points on the scatter plot should be colored by 'Genre'\", code = {"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-returned-values",
    "href": "slides/wrkshp.html#testing-modules-returned-values",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: returned values",
    "text": "Testing modules: returned values\n\nBranch: 12d_tests-modules\n\n\n\n\n\n\n\nValues from mod_var_input_ui() are passed to setInputs()\n\n\n\nCompare with session$returned()\n\n\n\n\nshiny::testServer(app = mod_var_input_server, expr = {\n      # set inputs\n      session$setInputs(y = \"imdb_rating\",\n                        x = \"audience_score\",\n                        z = \"mpaa_rating\",\n                        alpha = 0.5,\n                        size = 2,\n                        plot_title = \"Enter plot title\")\n      # test against inputs in mod_var_input_ui()\n      testthat::expect_equal(object = session$returned(),\n        expected = list(y = \"imdb_rating\",\n                        x = \"audience_score\",\n                        z = \"mpaa_rating\",\n                        alpha = 0.5,\n                        size = 2,\n                        plot_title = \"Enter plot title\"))\n})"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-returned-values-1",
    "href": "slides/wrkshp.html#testing-modules-returned-values-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: returned values",
    "text": "Testing modules: returned values\n\nBranch: 12d_tests-modules\n\n\nWe know the values are being returned from mod_var_input_server()\n\n\n\n\n“how can we test if the reactive values (selected_vars) are passed into mod_scatter_display_server()?”\n\n\n\n\n\n\n\nmovies_server &lt;- function(input, output, session) {\n\n      selected_vars &lt;- mod_var_input_server(\"vars\")\n\n      mod_scatter_display_server(\"plot\", var_inputs = selected_vars)\n      \n}"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-reactive-inputs",
    "href": "slides/wrkshp.html#testing-modules-reactive-inputs",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: reactive inputs",
    "text": "Testing modules: reactive inputs\n\nBranch: 12d_tests-modules\n\n\n\n\n\n\n\nIf we pass the values from the variable input module to args = list(), we get an error:\n\n\n\n\nshiny::testServer(app = mod_scatter_display_server,\n  args = list(var_inputs = \n        list(x = \"critics_score\",\n            y = \"imdb_rating\",\n            z = \"mpaa_rating\",\n            alpha = 0.5,\n            size = 2,\n            plot_title = \"Enter Plot Title\")), expr = {\n    testthat::expect_equal(object = inputs(),\n      expected = list(x = \"critics_score\",\n                      y = \"imdb_rating\",\n                      z = \"mpaa_rating\",\n                      alpha = 0.5,\n                      size = 2,\n                      plot_title = \"Enter Plot Title\"))\n})\n\n\n\n\n\n\n\n\n[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]\n\n── Error (test-mod_scatter_display.R:29:13): ──\nError in `var_inputs()`: could not find function \"var_inputs\""
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-reactive-inputs-1",
    "href": "slides/wrkshp.html#testing-modules-reactive-inputs-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: reactive inputs",
    "text": "Testing modules: reactive inputs\n\nBranch: 12d_tests-modules\n\n\n\nWe can fix this by simulating how selected_vars is used in testServer()\n\n\n\n\n\n\nIf we wrap the values in reactive() and pass them as var_inputs to args, this simulates the reactive values in selected_vars\n\n\n\ninputs() is the object used to create the graph in the call to renderPlot()\n\n\n\n\nshiny::testServer(app = mod_scatter_display_server,\n  args = list(var_inputs = \n      shiny::reactive(\n        list(x = \"critics_score\",\n            y = \"imdb_rating\",\n            z = \"mpaa_rating\",\n            alpha = 0.5,\n            size = 2,\n            plot_title = \"Enter Plot Title\"))), expr = {\n    testthat::expect_equal(object = inputs(),\n      expected = list(x = \"critics_score\",\n                      y = \"imdb_rating\",\n                      z = \"mpaa_rating\",\n                      alpha = 0.5,\n                      size = 2,\n                      plot_title = \"Enter Plot Title\"))\n})"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-how-does-this-work",
    "href": "slides/wrkshp.html#testing-modules-how-does-this-work",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: how does this work?",
    "text": "Testing modules: how does this work?\n\nBranch: 12d_tests-modules\n\n\n\nIf pause execution with the debugger, we can see the difference:\n\n\n\n\n\n\nBrowse[1]&gt; selected_vars\nreactive({\n    list(\n      y = input$y, \n      x = input$x, \n      z = input$z, \n      alpha = input$alpha, \n      size = input$size, \n      plot_title = input$plot_title\n      )\n})\n\n\n\n\n\nBrowse[1]&gt; selected_vars()\n$y\n[1] \"audience_score\"\n\n$x\n[1] \"imdb_rating\"\n\n$z\n[1] \"mpaa_rating\"\n\n$alpha\n[1] 0.5\n\n$size\n[1] 2\n\n$plot_title\n[1] \"\""
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-reactive-inputs-2",
    "href": "slides/wrkshp.html#testing-modules-reactive-inputs-2",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: reactive inputs",
    "text": "Testing modules: reactive inputs\n\nBranch: 12d_tests-modules\n\n\n\nWe can check other input values by passing them to var_inputs in args = list()\n\n\n\n\n\n\nThese values simulate alternate user inputs being passed from the variable input module (as selected_vars)\n\n\n\n\nshiny::testServer(app = mod_scatter_display_server,\n  args = list(var_inputs =\n      shiny::reactive(\n        list(x = \"critics_score\",\n             y = \"imdb_num_votes\",\n             z = \"genre\",\n             alpha = 0.75,\n             size = 3,\n             plot_title = \"New plot title\"))), expr = {\n})"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-outputs",
    "href": "slides/wrkshp.html#testing-modules-outputs",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: outputs",
    "text": "Testing modules: outputs\n\nBranch: 12d_tests-modules\n\n\n\n\n“In terms of your testing strategy, you shouldn’t bother yourself with ‘is Shiny generating the correct structure so that the plot will render in the browser?’ That’s a question that the Shiny package itself needs to answer (and one for which we have our own tests).”\n\n\n\n\n\n“The goal for your tests should be to ask ‘is the code that I wrote producing the plot I want?’ There are two components to that question:\n\nDoes the plot generate without producing an error?\nIs the plot visually correct?\n\n\n\n\n\n\n\ntestServer is great for assessing the first component here. - Server Function Testing, Shiny Documentation"
  },
  {
    "objectID": "slides/wrkshp.html#testing-modules-verifying-outputs",
    "href": "slides/wrkshp.html#testing-modules-verifying-outputs",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Testing modules: verifying outputs",
    "text": "Testing modules: verifying outputs\n\nBranch: 12d_tests-modules\n\n\n\nThe outputs in the display module are handled by the render*() functions, so we need to verfiy ‘does the plot generate without producing an error?’\n\n\n\n\n\n\nIf we know how to subset the object rendered with output$scatterplot, we can test this for directly\n\n\n\n\ntestthat::expect_equal(object = output$scatterplot[[\"alt\"]],\n                       expected = \"Plot object\")\n\n\n\n\n\n\n\n\n\nWe can also build the graph in the display module and confirm with is.ggplot()\n\n…or we can do a sanity check by passing plot to print()\n\n\n\n\n  plot &lt;- scatter_plot(movies,\n    x_var = inputs()$x,\n    y_var = inputs()$y,\n    col_var = inputs()$z,\n    alpha_var = inputs()$alpha,\n    size_var = inputs()$size) +\n  ggplot2::labs(title = inputs()$plot_title,\n    x = stringr::str_replace_all(tools::toTitleCase(\n      inputs()$x), \"_\", \" \"),\n    y = stringr::str_replace_all(tools::toTitleCase(\n      inputs()$y), \"_\", \" \")) +\n  ggplot2::theme_minimal() +\n  ggplot2::theme(legend.position = \"bottom\")\n  testthat::expect_true(ggplot2::is.ggplot(plot))"
  },
  {
    "objectID": "slides/wrkshp.html#system-tests-with-shinytest2",
    "href": "slides/wrkshp.html#system-tests-with-shinytest2",
    "title": "Developing & Testing Your Shiny Application",
    "section": "System tests with shinytest2",
    "text": "System tests with shinytest2\n\nBranch: 12f_tests-system\n\n\nSetting up shinytest2:\n\n\n\n\n\nInstall shinytest2 and run use_shinytest2()\n\n\n\ninstall.packages('shinytest2')\nlibrary(shinytest2)\nshinytest2::use_shinytest2()\n\n\n\n\n\nAdding shinytest2::load_app_env() to tests/testthat/setup-shinytest2.R\nAdding *_.new.png to .gitignore\nAdding _\\\\.new\\\\.png$ to .Rbuildignore\nSetting active project to /path/to/moviesApp\nAdding shinytest2 to Suggests field in DESCRIPTION\nSetting active project to &lt;no active project&gt;"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-setup",
    "href": "slides/wrkshp.html#shinytest2-setup",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2 setup",
    "text": "shinytest2 setup\n\nBranch: 12f_tests-system\n\n\n\nshinytest2 installation checklist:\n\n\n\n\n\nVerify you can create a new session with:\n\nlibrary(chromote)\nb &lt;- ChromoteSession$new()\nb$view()"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-recording-tests",
    "href": "slides/wrkshp.html#shinytest2-recording-tests",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2: recording tests",
    "text": "shinytest2: recording tests\n\nBranch: 12f_tests-system\n\n\n\nIdeally we’d have one test recording per feature.\n\n\n\n\nFeature 1: Scatter plot data visualization dropdowns\n     As a film data analyst\n     I want to explore continuous and categorical variables in the movie review data\n     So that I can analyze relationships between movie reivew metrics"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-recording-tests-1",
    "href": "slides/wrkshp.html#shinytest2-recording-tests-1",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2: recording tests",
    "text": "shinytest2: recording tests\n\nBranch: 12f_tests-system\n\n\n\nIf we’ve been writing BDD scenarios, the tests are relatively easy to record:\n\n\n\n\n  Scenario: Change dropdown values for plotting\n     Given the movie review application is loaded\n     When I choose the variable 'IMDB number of votes' for the x-axis\n     And I choose the variable 'Critics Score' for the y-axis\n     And I choose the variable 'Genre' for the color\n     And I choose the size of the points to be 3\n     And I choose the opacity of the points to be 0.7"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-recording-features",
    "href": "slides/wrkshp.html#shinytest2-recording-features",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2: recording features",
    "text": "shinytest2: recording features\n\nBranch: 12f_tests-system\n\n\n\n\n\n\n\nshinytest2::record_test()"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-test-contents",
    "href": "slides/wrkshp.html#shinytest2-test-contents",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2: test contents",
    "text": "shinytest2: test contents\n\nBranch: 12f_tests-system\n\n\n\n\n\n\nTest file is saved in tests/testthat/test-shinytest2.R\n\nThe test file contains the contents of our scenario.\n\n\n\n\nlibrary(shinytest2)\n\ntest_that(\"{shinytest2} recording: moviesApp-feature-01\", {\n  app &lt;- AppDriver$new(name = \"moviesApp-feature-01\", \n                       height = 800, width = 1173)\n  app$set_inputs(`vars-y` = \"imdb_num_votes\")\n  app$set_inputs(`vars-x` = \"critics_score\")\n  app$set_inputs(`vars-z` = \"genre\")\n  app$set_inputs(`vars-alpha` = 0.7)\n  app$set_inputs(`vars-size` = 3)\n  app$set_inputs(`vars-plot_title` = \"New plot title\")\n  app$expect_values()\n})\n\n\n\n\n\n\n\n\n\n\n\n\n   Then the scatter plot should show 'IMDB number of votes' on the x-axis\n   And the scatter plot should show 'Critics Score' on the y-axis\n   And the points on the scatter plot should be colored by 'Genre'\n   And the size of the points on the scatter plot should be 3\n   And the opacity of the points on the scatter plot should be 0.7\n   And the title of the plot should be 'New Plot Title'"
  },
  {
    "objectID": "slides/wrkshp.html#shinytest2-writing-tests",
    "href": "slides/wrkshp.html#shinytest2-writing-tests",
    "title": "Developing & Testing Your Shiny Application",
    "section": "shinytest2: writing tests",
    "text": "shinytest2: writing tests\n\nBranch: 12f_tests-system\n\n\n\nWe can create system tests using the feature and scenario descriptions, BDD functions, and AppDriver$new()\n\n\n\n\n\n\n\n\n\ntestthat::describe(\"Feature 1: Scatter plot data visualization dropdowns\n     ...\", code = {\n  testthat::it(\"Scenario: Change dropdown values for plotting\n                 Given ...\n                 When ...\n                 Then ...\", {\n    app &lt;- AppDriver$new(name = \"moviesApp-feature-01\", height = 800, width = 1173)\n    app$set_inputs(`vars-y` = \"imdb_num_votes\")\n    app$set_inputs(`vars-x` = \"critics_score\")\n    app$set_inputs(`vars-z` = \"genre\")\n    app$set_inputs(`vars-alpha` = 0.7)\n    app$set_inputs(`vars-size` = 3)\n    app$set_inputs(`vars-plot_title` = \"New plot title\")\n    app$expect_values()\n  })\n})"
  },
  {
    "objectID": "slides/wrkshp.html#recap",
    "href": "slides/wrkshp.html#recap",
    "title": "Developing & Testing Your Shiny Application",
    "section": "Recap",
    "text": "Recap\n\nMartin Frigaard | Github | LinkedIn\n\n\n\nShiny App-Packages\n\n\nDESCRIPTION file and fields\n.Rproj files and fields\ndevtools function workflow\nroxygen2 & dependencies\nData\n\n\n\n\n\n\nLaunching apps\nExternal resources\nBDD tests, fixtures & helpers\nTesting modules & system tests\n\n\n\n\n\n\n\nRead more:\n\n\nR packages, 2ed\nshinytest2 documentation\nShiny testing (Shiny documentation)\n\n\n\n\n\n\nBDD in Action, 2ed\nWriting R Extensions\nShiny App-packages (in development)"
  },
  {
    "objectID": "slides/efficient-tests.html#introduction",
    "href": "slides/efficient-tests.html#introduction",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Introduction",
    "text": "Introduction\n\nA bit about me…\n\n\n\n\n\n\n\n\nAs a shiny developer\nI want to focus on writing tests that matter \nSo that I can spend less time testing code..."
  },
  {
    "objectID": "slides/efficient-tests.html#agenda",
    "href": "slides/efficient-tests.html#agenda",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Agenda",
    "text": "Agenda\n\n\n\n\nShiny testing\n\n\nUnit tests\nIntegration tests\nSystem tests\nTest tools\n\nFixtures\nHelpers\n\n\n\n\nDevelopment\n\n\nStandard app development\nBehavior-driven development\n\nFeatures\n\nScenarios\n\n\n\n\nEfficient Tests\n\n\nWhat should I test?\nHow should I test it?\nCode coverage"
  },
  {
    "objectID": "slides/efficient-tests.html#testing-your-shiny-app",
    "href": "slides/efficient-tests.html#testing-your-shiny-app",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Testing your shiny app",
    "text": "Testing your shiny app\n\n\nIs much easier if your app is in a package\n\n\n   …but its not impossible if it’s not\n\n\n\nRequires additional packages and/or functions beyond testthat\n\n\n\n\nBenefits from having a well-designed test suite\n\n\n\n\nUnderstand the relationship between R/ files and test- files"
  },
  {
    "objectID": "slides/efficient-tests.html#unit-tests",
    "href": "slides/efficient-tests.html#unit-tests",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Unit Tests",
    "text": "Unit Tests\n\n\n\nPackage(s): testthat\n\n\n\n\n\nFocuses on specific units of code, ensuring each function or component behaves as intended.\n\n\n\n\nExample: Verifying that a function correctly calculates a specific value based on the input."
  },
  {
    "objectID": "slides/efficient-tests.html#integration-tests",
    "href": "slides/efficient-tests.html#integration-tests",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Integration Tests",
    "text": "Integration Tests\n\n\n\nPackage(s): shiny (testServer()) & testtthat\n\n\n\n\n\nConfirms app/module server functions operate as expected\n\n\n\n\nExample: Making sure that modules communicate and display the results from a specific function or calculation"
  },
  {
    "objectID": "slides/efficient-tests.html#system-tests",
    "href": "slides/efficient-tests.html#system-tests",
    "title": "What Do You Mean Test Coverage?!",
    "section": "System Tests",
    "text": "System Tests\n\n\nPackage(s): shiny & shinytest2\n\n\n\nConfirms all parts of the app behave correctly and provide a good user experience.\n\n\n\nExample: Simulating a user’s experience with the application, selecting inputs, entering data, and ensuring the application responds correctly and displays the expected outputs."
  },
  {
    "objectID": "slides/efficient-tests.html#test-fixtures",
    "href": "slides/efficient-tests.html#test-fixtures",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Test Fixtures",
    "text": "Test Fixtures\n\nTest fixtures are used to create repeatable test conditions\n\n\n\n\nGood fixtures provide a consistent, well-defined test environment.\n\n\n\n\n\nFixtures are removed/destroyed after the test is executed.\n\n\n\n\n\nThis ensures any changes made during the test don’t persist or interfere with future tests."
  },
  {
    "objectID": "slides/efficient-tests.html#example-custom-plot-function",
    "href": "slides/efficient-tests.html#example-custom-plot-function",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Example: custom plot function",
    "text": "Example: custom plot function\n\n\nMy app has the following utility function for creating a ggplot2 scatter plot:\n\n\n\n\n\nscatter_plot &lt;- function(df, x_var, y_var, col_var, alpha_var, size_var) {\n    ggplot2::ggplot(data = df,\n      ggplot2::aes(x = .data[[x_var]],\n          y = .data[[y_var]],\n          color = .data[[col_var]])) +\n      ggplot2::geom_point(alpha = alpha_var, size = size_var)\n\n}\n\n\n\n\n\nThe data masking from rlang (.data[[ ]]) means it can handle string arguments (i.e. input$x and input$y)"
  },
  {
    "objectID": "slides/efficient-tests.html#example-test-fixture",
    "href": "slides/efficient-tests.html#example-test-fixture",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Example: test fixture",
    "text": "Example: test fixture\n\n\nTest fixtures can be stored in tests/testthat/fixtures/\n\n\n\n\n\ntests/\n  ├── testthat/\n  │   ├── fixtures/                                         \n  │   │   ├── make-tidy_ggp2_movies.R \n  │   │   └── tidy_ggp2_movies.rds \n  │   ├── helper.R                                          \n  │   └── test-scatter_plot.R                                     \n  └── testthat.R\n\n\n\n\n\n\n\nThe make-tidy_ggp2_movies.R creates a ‘tidy’ version of ggplot2movies::movies."
  },
  {
    "objectID": "slides/efficient-tests.html#using-test-fixtures",
    "href": "slides/efficient-tests.html#using-test-fixtures",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Using test fixtures",
    "text": "Using test fixtures\n\n\nStatic data fixtures can be accessed with testthat::test_path():\n\n\n\n\ntest_that(\"tidy_ggp2_movies.rds works\", code = {\ntidy_ggp2_movies &lt;- readRDS(test_path(\"fixtures\", \"tidy_ggp2_movies.rds\"))\n  app_graph &lt;- scatter_plot(tidy_ggp2_movies,\n                            x_var = 'rating',\n                            y_var = 'budget',\n                            col_var = 'mpaa',\n                            alpha_var = 3/4,\n                            size_var = 2.5)\nexpect_true(ggplot2::is.ggplot(app_graph))\n})\n\n\n\n\n\n\n\n\nIf tidy_ggp2_movies.rds is used in a few tests, move make-tidy_ggp2_movies.R into data-raw/ and make tidy_ggp2_movies part of the package\n\n\n\n\n\n\nggplot2::is.ggplot() confirms a plot object has been built (doesn’t require a snapshot test)"
  },
  {
    "objectID": "slides/efficient-tests.html#test-helpers",
    "href": "slides/efficient-tests.html#test-helpers",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Test helpers",
    "text": "Test helpers\nTest helpers reduce repeated/duplicated test code\n\n\nObjects that aren’t large enough to justify storing as static test fixtures can be created with helper functions\n\n\n\nHelpers can be stored in tests/testthat/helper.R\n\n\n\n\n\ntests/\n  ├── testthat/\n  │   ├── fixtures/\n  │   │   ├── make-tidy_ggp2_movies.R\n  │   │   └── tidy_ggp2_movies.rds\n  │   ├── helper.R\n  │   └── test-scatter_plot.R    \n  └── testthat.R"
  },
  {
    "objectID": "slides/efficient-tests.html#example-test-helper",
    "href": "slides/efficient-tests.html#example-test-helper",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Example: test helper",
    "text": "Example: test helper\n\n\n\n\nAssume I want a list of inputs to pass to the scatter_plot() in my test:\n\n\n\nggp2_scatter_inputs &lt;- list(  \n        x = \"rating\",\n        y = \"length\",\n        z = \"mpaa\",\n        alpha = 0.75,\n        size = 3,\n        plot_title = \"Enter plot title\"\n)\n\n\n\n\n\n\n\n\n\nI could store these values in a function in tests/testthat/helper.R\n\n\n\nvar_inputs &lt;- function() {\n   list( x = \"rating\",\n        y = \"length\",\n        z = \"mpaa\",\n        alpha = 0.75,\n        size = 3,\n        plot_title = \"Enter plot title\"\n    )\n}"
  },
  {
    "objectID": "slides/efficient-tests.html#using-test-helpers",
    "href": "slides/efficient-tests.html#using-test-helpers",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Using test helpers",
    "text": "Using test helpers\n\n\nThis removes duplicated code…\n\n\n\n\n\ntest_that(\"scatter_plot() works\", code = {\n  \ntidy_ggp2_movies &lt;- readRDS(test_path(\"fixtures\", \"tidy_ggp2_movies.rds\"))\n  \napp_graph &lt;- scatter_plot(tidy_ggp2_movies,\n                          x_var = var_inputs()$x,\n                          y_var = var_inputs()$y,\n                          col_var = var_inputs()$z,\n                          alpha_var = var_inputs()$alpha,\n                          size_var = var_inputs()$size)\n\ntestthat::expect_true(ggplot2::is.ggplot(app_graph))\n})\n\n\n\n\n\n\n…but it’s unclear where var_inputs() comes from (or what it contains)"
  },
  {
    "objectID": "slides/efficient-tests.html#tips-on-test-helpers",
    "href": "slides/efficient-tests.html#tips-on-test-helpers",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Tips on test helpers",
    "text": "Tips on test helpers\n\nIf you have repeated code in your tests, consider the following questions below before creating a helper function:\n\n\n\nDoes the code help explain what behavior is being tested?\nWould a helper make it harder to debug the test when it fails?\n\n\n\nConsider a function like make_ggp2_inputs():\n\n\n\n\n\n\n\n\n\n\nlist(x = 'rating',\n     y = 'length',\n     z = 'mpaa',\n     alpha = 0.75,\n     size = 3,\n     plot_title = 'Enter plot title'\n     )"
  },
  {
    "objectID": "slides/efficient-tests.html#traditional-development",
    "href": "slides/efficient-tests.html#traditional-development",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Traditional development",
    "text": "Traditional development\n\nFocuses on coding an applications functionalities\n\n\n\n\nUser specifications often go beyond what they ‘need’ and include solutions\n\n\n\n\nSpecifications with solutions bind developers to a particular implementation\n\n\n\n\nDevelopers will then focus on the technical implementation and not finding the optimal solution\n\n\n\n\nCan lead to delays evaluating the testability of features until late in the project"
  },
  {
    "objectID": "slides/efficient-tests.html#behavior-driven-development",
    "href": "slides/efficient-tests.html#behavior-driven-development",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Behavior-driven development",
    "text": "Behavior-driven development\n\nCreate applications that meet desired behaviors\n\n\n\n\nStarts with understanding the user needs\n\n\n\n\nAcknowledges specifications and requirements will change and evolve\n\n\n\n\nIdentifies and prioritizes features that deliver value\n\n\n\n\nUses scenarios for guiding how to test and build features"
  },
  {
    "objectID": "slides/efficient-tests.html#how-does-bdd-work",
    "href": "slides/efficient-tests.html#how-does-bdd-work",
    "title": "What Do You Mean Test Coverage?!",
    "section": "How does BDD work?",
    "text": "How does BDD work?\n\nUsers and developers work together to develop a clear vision of app’s value\n\n\n\nOngoing discussions between users and developers improves understanding of the problem by:\n\n\n\n\nUncovering hidden assumptions\n\n\n\n\nConsidering any potential risks\n\n\n\n\nBuilding a shared appreciation for meeting user needs and achieving business goals"
  },
  {
    "objectID": "slides/efficient-tests.html#features",
    "href": "slides/efficient-tests.html#features",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Features",
    "text": "Features\n\nFeatures are tangible functionalities that facilitate achieving a business goal\n\n\n\n\nWho wants the feature?\n\n\n\n\nWhat action does the feature perform?\n\n\n\n\nWhat is the intended business value?\n\n\n\nGherkin:\n\nFeature: &lt; what is being built to deliver the proposed value &gt;\n  As a &lt; user/stakeholder &gt;\n  I want to &lt; perform some action &gt;\n  So that I can &lt; achieve a business goal &gt;"
  },
  {
    "objectID": "slides/efficient-tests.html#describing-features",
    "href": "slides/efficient-tests.html#describing-features",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Describing features",
    "text": "Describing features\n\nUsers and developers write stories to describe a feature’s expected outcome\n\n\n\n\nUses a first-person voice\n\n\n\n\nStates what users need\n\n\n\n\nStates why users need it\n\n\n\n\nFeature: CDISC Variable Exploration Dashboard\n  As a researcher or analyst \n  I want to explore variables in the Vital Signs Analysis Dataset (ADVS)\n  So that I can analyze and derive insights from the vital signs data"
  },
  {
    "objectID": "slides/efficient-tests.html#scenarios",
    "href": "slides/efficient-tests.html#scenarios",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Scenarios",
    "text": "Scenarios\n\nDescribe application behaviors in a plain, human-readable format\n\n\n\n\nGiven: establishes preconditions for the scenario.\n\n\n\n\nWhen: specifies an action being tested.\n\n\n\n\nThen: defines what outcomes to expect.\n\n\n\nGherkin:\n\n  Scenario: &lt; concrete example &gt;\n    Given &lt; initial conditions &gt;\n    When  &lt; action to test &gt;\n    Then  &lt; expected outcome &gt;"
  },
  {
    "objectID": "slides/efficient-tests.html#writing-scenarios",
    "href": "slides/efficient-tests.html#writing-scenarios",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Writing scenarios",
    "text": "Writing scenarios\n\n\n\nSet the stage\n\n\nFeature: User login\n\n  Scenario: Successful login with correct credentials\n    Given the login page is loaded\n\n\n\n\n\n\nAction and outcome\n\n\n    When the user enters a valid username and password\n    Then the user should be redirected to the dashboard\n\n\n\n\n\n\n\nMore outcomes\n\n\n    And the user should see the landing page\n\n\n\n\n\n\n\n\nAlternate story\n\n\n  Scenario: Unsuccessful login with incorrect password\n    Given the login page is loaded\n    When the user enters a valid username but an incorrect password\n    Then the user should see an error message stating 'Invalid password.'"
  },
  {
    "objectID": "slides/efficient-tests.html#bdd-with-shiny",
    "href": "slides/efficient-tests.html#bdd-with-shiny",
    "title": "What Do You Mean Test Coverage?!",
    "section": "BDD with Shiny",
    "text": "BDD with Shiny\nEfficient testing means writing scenarios that cover critical paths.\n\n\n\nIdeally everything in your app is tested\n\n\n\n\nIn reality, decisions have to be made about what to test\n\n\n\n\nIf developers and users have collaboratively defined key features and expected behaviors, prioritize those scenarios\n\n\n\n\nAdopt an ‘inspect and adapt’ posture"
  },
  {
    "objectID": "slides/efficient-tests.html#testthat-bdd-support",
    "href": "slides/efficient-tests.html#testthat-bdd-support",
    "title": "What Do You Mean Test Coverage?!",
    "section": "testthat BDD support",
    "text": "testthat BDD support\n\n\ntestthat has describe() and it() functions for features and scenarios:\n\n\n\n\n\ntestthat::describe(\n    \"Feature: Scatter plot data visualization\n       As a film data analyst\n       I want to explore movie review data from IMDB.com\n       So that I can analyze relationships between movie reivew metrics\"\n       code = {\n      testthat::it(\n        \"Scenario: Create scatter plot\n           Given I have launched the movie review exploration app,\n           When I view the scatter plot,\n           Then I should see points representing values for a default\n                set of continuous and categorical columns.\", \n          code = {\n      # test code\n  })\n})"
  },
  {
    "objectID": "slides/efficient-tests.html#efficient-testing",
    "href": "slides/efficient-tests.html#efficient-testing",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Efficient testing",
    "text": "Efficient testing\n\nUnit tests\n\nAll business logic (models, calculations, etc.) should have unit tests (no getting around this)\n\n\n\n\nIntegration tests\n\nshiny::testServer() tests should focus on ‘handshakes’ between modules and exporting/saving data\n\n\n\n\n\nSystem/end-to-end tests\n\nPrioritize the feature/scenario that most directly observes the intended business goal with shinytest2()"
  },
  {
    "objectID": "slides/efficient-tests.html#test-coverage",
    "href": "slides/efficient-tests.html#test-coverage",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Test coverage",
    "text": "Test coverage\n\n\nTest coverage focuses on the execution paths (i.e., it assumes all paths are equally important)\n\n\n\nTest coverage can’t check if our app meets user expectations\n\n\n\n\nTest coverage is a valuable metric, but shouldn’t be the sole criterion for assessing your app"
  },
  {
    "objectID": "slides/efficient-tests.html#remember",
    "href": "slides/efficient-tests.html#remember",
    "title": "What Do You Mean Test Coverage?!",
    "section": "Remember",
    "text": "Remember\n\n\n\nToday’s functionality is tomorrow’s regression\n\n\n\n\nApps need thorough and continuous testing in development so new features don’t negatively affect the existing functionalities"
  }
]