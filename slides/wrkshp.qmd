---
title: "Developing & Testing Your Shiny Application"
author: "Martin Frigaard (Atorus)"
format: 
  revealjs: 
    title-slide-style: pandoc
    center: false
    height: 900
    width: 1600
    theme: slides.scss
    highlight-style: ayu-mirage
    transition: fade
    code-line-numbers: false
    slide-number: true
    chalkboard: true
    scrollable: true
    pdf-separate-fragments: false

title-slide-attributes:
  data-background-image: img/dark_bkg.jpg
  data-background-size: contain
  data-background-opacity: "0.60"
  
from: markdown+emoji
editor: source
---

```{r, include = FALSE}
library(tidyverse)
library(scales)
library(knitr)
library(kableExtra)
library(ggthemes)
options(
  dplyr.print_min = 6,
  dplyr.print_max = 6,
  width = 64,
  pillar.print_max = 8
)
library(fontawesome)
library(rlang)
```

## Introduction

<br>

. . .

[*Why are you here?*]{style="font-size: 1.20em;"}

<br>

. . .

<br>

:::{style="font-size: 0.95em;"}

Comfortable building shiny apps, not as comfortable with R packages

:::

. . .

<br>

:::{style="font-size: 0.95em;"}

Encountered frameworks (`golem`, `leprechaun`, or `rhino`) and not sure which one to use

:::

. . .

<br>

:::{style="font-size: 0.95em;"}

Comfortable building R packages, but want to build more app-packages

:::

## Agenda

<br>

::: columns
:::{.column width="33%"}
#### Shiny stuff

-   Shiny

-   Packages

-   Development
:::

:::{.column width="33%"}
#### Package stuff

-   Documentation

-   Dependencies

-   Data
:::

:::{.column width="33%"}
#### App-package stuff

-   Launch

-   External files

-   Testing
:::
:::

# Shiny

. . .

-   The application code and data in this presentation come from the excellent [Building Web Applications with Shiny](https://rstudio-education.github.io/shiny-course/) (BWAS) course

. . .

-   The learning modules in this course also serve as 'prerequisites' for many of the topics covered here

## New Shiny app

::::footer
[Branch: `main`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="40%"}
-   Shiny apps only require two files (`README.md` is optional)

### 

-   Boilerplate app code in `app.R`
:::

:::{.column width="60%"}
``` bash
moviesApp/
├── README.md
├── app.R
└── moviesApp.Rproj

1 directory, 3 files
```
:::
:::

## Shiny code

:::: footer
[Branch: `02_movies-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="40%"}
Slightly more developed:

-   Updates to `app.R`

-   Utility function (`utils.R`)
:::

:::{.column width="60%"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3|6|"
moviesApp/
├── README.md
├── app.R
├── movies.RData
├── moviesApp.Rproj
└── utils.R

1 directory, 5 files
```
:::
:::

## Shiny project folders

:::: footer
[Branch: `03_proj-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

::: columns
:::{.column width="40%"}
Shiny app project folders:

-   `R/`

-   `www/`
:::

:::{.column width="60%"}
<br>

:::{style="font-size: 0.79em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2|3|4-6|11|11-12|"
moviesApp/
├── DESCRIPTION
├── R
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
├── moviesApp.Rproj
└── www
    └── shiny.png

3 directories, 9 files
```
:::
:::
:::

## Shiny loadSupport()

:::: footer
[Branch: `03_proj-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

Shiny automatically `source`s the files in the `R/` folder and serves the external resources in `www/`

. . .

-   *loads any top-level supporting `.R` files in the `R/` directory adjacent to the `app.R/server.R`/`ui.R` files* - [Shiny `loadSupport()`](https://shiny.posit.co/r/reference/shiny/1.5.0/loadsupport)

. . .

-   *Add images by placing your image in a folder labeled `www` within your Shiny app directory* - [Building a user interface](https://shiny.posit.co/r/getstarted/shiny-basics/lesson2/index.html#recap)

## DESCRIPTION files

:::: footer
[Branch: `04_description`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="40%"}
The `DESCRIPTION` file can be used to control the `DisplayMode` (i.e., `Showcase`)
:::

:::{.column width="60%"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|4"
Type: shiny
Title: movies app
Author: John Smith
DisplayMode: Showcase
```
:::
:::

## DESCRIPTION fields

:::: footer
[Branch: `04_description`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

<br>

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.85em;"}
'*The `Package`, `Version`, `License`, `Description`, `Title`, `Author`, and `Maintainer` fields are mandatory.*' - [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#The-DESCRIPTION-file)
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.83em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|1|2|3|4|5|6|7|"
Package: moviesApp
Title: movies app
Version: 0.0.0.9000
Author: John Smith [aut, cre]
Maintainer: John Smith <John.Smith@email.io>
Description: A movie-review shiny application.
License: GPL-3
```
:::
:::
:::

## .Rproj files

:::: footer
[Branch: `05_rproj`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

. . .

::: columns
:::{.column width="40%"}
The `.Rproj` file is a plain text configuration file for the Posit Workbench IDE.
:::

:::{.column width="60%"}
:::{style="font-size: 0.75em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|10|"
moviesApp/
├── DESCRIPTION
├── R
│   ├── mod_scatter_display.R
│   ├── mod_var_input.R
│   └── utils.R
├── README.md
├── app.R
├── movies.RData
├── moviesApp.Rproj
└── www
    └── shiny.png

3 directories, 9 files
```
:::
:::
:::

## Shiny project .Rproj fields

:::: footer
[Branch: `05_rproj`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

::: columns
:::{.column width="40%"}
Shiny apps built with the **New Project Wizard** have the following fields:
:::

:::{.column width="60%"}
:::{style="font-size: 0.80em;"}
```{bash}
#| eval: false 
#| echo: true
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: UTF-8

RnwWeave: Sweave
LaTeX: XeLaTeX
```
:::
:::
:::

## R Package (Project build tools)

:::: footer
[Branch: `05_rproj`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.85em;"}
These are accessible under:

**Tools \> Project Options... \> Build Tools**

<br>

Change **Project build tools** to **Package**
:::
:::

:::{.column width="60%"}
![](img/proj_build_tools.png)
:::
:::

## R Package .Rproj fields

:::: footer
[Branch: `05_rproj`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>
<br>

::: columns
:::{.column width="35%"}
These add the following fields to the `.Rproj` file:
:::

:::{.column width="65%"}
:::{style="font-size: 0.80em;"}
```{bash}
#| eval: false 
#| echo: true
BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source
PackageRoxygenize: rd,collate,namespace
```
:::
:::
:::

## Creating new app-packages

:::: footer
[Branch: `06a_create-package`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

::: columns
:::{.column width="45%"}
:::{style="font-size: 0.80em;"}
Create new Shiny app-packages (or convert Shiny projects) with `usethis::create_package()`

<br>

Assuming it's being called from the desired location of your new app-package:
:::

<br>

:::{style="font-size: 0.80em;"}
```{r}
#| eval: false 
#| echo: true
usethis::create_package(path = getwd())
```
:::
:::

:::{.column width="55%"}
:::{style="font-size: 0.80em;"}
This creates an app similar to the version we saw in `main`:

```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2|3|4|5|6|7|8|"
newApp/
  ├── .Rbuildignore
  ├── .Rproj.user/
  ├── .gitignore
  ├── DESCRIPTION
  ├── NAMESPACE
  ├── R/
  └── newApp.Rproj
```
:::
:::
:::

## Converting Shiny apps (fields)

:::: footer
[Branch: `06a_create-package`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.85em;"}
Many of the `DESCRIPTION` fields inevitably require revision

<br>

We can handle this during the creation process with the `fields` argument
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.62em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|4|6-10|11-15|"
fields = list(Package = 'moviesApp',
       Version = '0.0.0.9000',
       Title = 'movies app',
       Description = 'A movie-review Shiny application.',
       "Authors@R" = NULL,
       Author = utils::person(
          given = "John", 
          family = "Smith", 
          email = "John.Smith@email.io", 
          role = c("aut", "cre")),
        Maintainer = utils::person(
          given = "John", 
          family = "Smith",
          email = "John.Smith@email.io"),
        License = "GPL-3")
```
:::
:::
:::

## Converting Shiny apps (IDE options)

:::: footer
[Branch: `06a_create-package`]{style="font-weight: bold; font-size: 1.10em;"}
:::::

<br>

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.85em;"}
`check_name`: verifies your Shiny app-package name is valid for CRAN

<br>

`open`: can be set to `FALSE` if you don't need Posit Workbench to open in a new session
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.61em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|17-18|"
usethis::create_package(path = getwd(),
  fields = list(Package = 'moviesApp',
         Version = '0.0.0.9000',
         Title = 'movies app',
         Description = 'A movie-review Shiny application.',
         "Authors@R" = NULL,
         Author = utils::person(
            given = "John", 
            family = "Smith", 
            email = "John.Smith@email.io", 
            role = c("aut", "cre")),
          Maintainer = utils::person(
            given = "John", 
            family = "Smith",
            email = "John.Smith@email.io"),
          License = "GPL-3"),
  check_name = FALSE, 
  open = FALSE)
```
:::
:::
:::

## Development with devtools

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 1.05em;"}
`load_all()` is the development function you'll use the most during package development
:::

<br>

. . .

:::{style="font-size: 1.05em;"}
`document()` creates the help files and writes the `NAMESPACE`
:::

<br>

. . .

:::{style="font-size: 1.05em;"}
`install()` installs a local version of your app-package
:::

## Development: load_all()

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 0.85em;"}
'*`load_all()` removes friction from the development workflow and eliminates the temptation to use workarounds that often lead to mistakes around namespace and dependency management*' - [Benefits of `load_all()`, R Packages, 2ed](https://r-pkgs.org/workflow101.html#benefits-of-load_all)
:::

<br>

. . .

::: columns
:::{.column width="50%"}
```{r}
#| eval: false 
#| echo: true
devtools::load_all()
```
:::

:::{.column width="50%"}
```{bash}
#| eval: false 
#| echo: true
ℹ Loading moviesApp
```
:::
:::

<br>

. . .

Load the package when anything changes in the `R/` folder.

## Development: document()

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 0.90em;"}
`document()` writes dependencies into the `NAMESPACE` and creates the help files in the `man/` folder
:::

. . .

<br>

::: columns
:::{.column width="30%"}
:::{style="font-size: 0.85em;"}
```{r}
#| eval: false 
#| echo: true
devtools::document()
```
:::
:::

:::{.column width="70%"}
:::{style="font-size: 0.80em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2|4|"
First time using roxygen2. Upgrading automatically...
Setting `RoxygenNote` to "7.2.3"
Warning message:
roxygen2 requires Encoding: "UTF-8"
ℹ Current encoding is NA 
```
:::
:::
:::

. . .

<br>

::: columns
:::{.column width="30%"}
:::{style="font-size: 0.85em;"}
Updated `DESCRIPTION` fields
:::
:::

:::{.column width="70%"}
:::{style="font-size: 0.80em;"}
```{bash}
#| eval: false 
#| echo: true
RoxygenNote: 7.2.3
Encoding: UTF-8

```
:::
:::
:::

## Development: document()

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

<br>

:::{style="font-size: 0.95em;"}
Future calls to `document()` will result in the following output:
:::

. . .

<br>

::: columns
:::{.column width="30%"}
:::{style="font-size: 0.85em;"}
```{r}
#| eval: false 
#| echo: true
devtools::document()
```
:::
:::

:::{.column width="70%"}
:::{style="font-size: 0.73em;"}
```{bash}
#| eval: false 
#| echo: true
==> devtools::document(roclets = c('rd', 'collate', 'namespace'))

ℹ Updating moviesApp
  documentation
ℹ Loading moviesApp
Documentation completed
```
:::
:::
:::

## Development: install()

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

:::{style="font-size: 0.90em;"}
Install a package after the initial setup, after major changes to the code, documentation, or dependencies, and before committing or sharing.
:::

. . .

<br>

::: columns
:::{.column width="25%"}
:::{style="font-size: 0.80em;"}
```{r}
#| eval: false 
#| echo: true
devtools::install()
```
:::
:::

:::{.column width="70%"}
:::{style="font-size: 0.59em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3|8|"
==> R CMD INSTALL --preclean --no-multiarch --with-keep.source moviesApp

* installing to library ‘/path/to/pkg/R-4.2/x86_64-apple-darwin17.0’
* installing *source* package ‘moviesApp’ ...
** using staged installation
** R
** byte-compile and prepare package for lazy loading
No man pages found in package  ‘moviesApp’ 
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded from temporary location
** testing if installed package can be loaded from final location
** testing if installed package keeps a record of temporary installation path
* DONE (moviesApp)
```
:::
:::
:::

## Development: check()?

:::: footer
[Branch: `06b_devtools`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

`devtools::check()` performs a series of checks to ensure a package meets the standards set by [CRAN](https://cran.r-project.org/)

. . .

<br>

::: columns
:::{.column width="38%"}
:::{style="font-size: 0.73em;"}
Consider `check()` like 'quality control' for:

- Documentation\
- `NAMESPACE` dependencies\
- Unnecessary or non-standard folders and files\
- etc.
:::
:::

:::{.column width="2%"}
:::

:::{.column width="60%"}
:::{style="font-size: 0.70em;"}
[R Packages recommends](https://r-pkgs.org/workflow101.html#sec-workflow101-r-cmd-check) using `check()` often, but I agree with the advice in [Mastering Shiny](https://mastering-shiny.org/scaling-packaging.html#r-cmd-check) on using `check()` with app-packages,

> *"I don't recommend that you \[call `check()`\] the first time, the second time, or even the third time you try out the package structure. Instead, I recommend that you get familiar with the basic structure and workflow before you take the next step to make a fully compliant package."*
:::
:::
:::

# Ready

. . .

[BREAK!]{style="font-weight: bold; font-size: 1.60em;"}

# R Packages

Recap: Shiny stuff

<br>

- [x]   `DESCRIPTION` file and fields 

- [x]   `.Rproj` files and fields 

- [x]   `devtools` functions (`load_all()`, `document()`, `install()`)

## Documentation: roxygen2

:::: footer
[Branch: `07_roxygen2`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

::: columns
:::{.column width="50%"}
1.  Each function needs:
    -   [`@title`, `@description`, `@param`(s), `@return`, and `@examples` (if applicable)]{style="font-size: 0.80em;"}
2.  Regularly load and document to preview the help files
    -   [`load_all()` & `document()`]{style="font-size: 0.80em;"}
:::

:::{.column width="50%"}
3.  Application functions

    -   [Link modules with `@seealso`]{style="font-size: 0.80em;"}\
    -   [Group functions with `@family`]{style="font-size: 0.80em;"}

4.  Use Markdown for code, emphasis, hyperlinks, etc.

5.  Include any additional information in a new `@section`
:::
:::

## Documentation: roxygen2 & document()

:::: footer
[Branch: `07_roxygen2`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

::: columns
:::{.column width="40%"}
![](img/roxygen2_document.png)
:::

:::{.column width="60%"}
```{bash}
#| eval: false 
#| echo: true
man
├── mod_scatter_display_server.Rd
├── mod_scatter_display_ui.Rd
├── mod_var_input_server.Rd
├── mod_var_input_ui.Rd
├── movies_app.Rd
├── movies_server.Rd
├── movies_ui.Rd
└── scatter_plot.Rd

1 directory, 8 files
```
:::
:::

## Dependencies

:::: footer
[Branch: `07_roxygen2`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

*What happens when we load, document, and install `moviesApp`, then try to launch the standalone app function?*

. . .

<br>

::: columns
:::{.column width="40%"}
```{r}
#| eval: false 
#| echo: true
devtools::load_all()
```
:::

:::{.column width="60%"}
:::
:::

. . .

::: columns
:::{.column width="40%"}
```{r}
#| eval: false 
#| echo: true
devtools::document()
```
:::

:::{.column width="60%"}
:::
:::

. . .

::: columns
:::{.column width="40%"}
```{r}
#| eval: false 
#| echo: true
devtools::install()
```
:::

:::{.column width="60%"}
:::
:::

. . .

<br>

::: columns
:::{.column width="10%"}
:::

:::{.column width="90%"}
```{r}
#| eval: false 
#| echo: true
library(moviesApp)
movies_app()
```

```{bash}
#| eval: false 
#| echo: true
Error in movies_app() : could not find function "movies_app"
```
:::
:::

## Dependencies: exports

:::: footer
[Branch: `08a_pkg-exports`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

*How can I export `movies_app()` from `moviesApp`?*

<br>

. . .

::: columns
:::{.column width="40%"}
Exporting functions:

:::{style="font-size: 0.80em;"}
-   Use `@export` tag from `roxygen2`

-   Name argument is optional

-   Run `document()` to write `NAMESPACE`
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3|4|"
# Generated by roxygen2: do not edit by hand

export(movies_app)
export(scatter_plot)
```
:::

<br>

![](img/app_fun_namespaced.png)
:::
:::

## Dependencies: imports

:::: footer
[Branch: `08b_pkg-imports`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
Add the package name to the `Imports` field in the `DESCRIPTION`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true
usethis::use_package('pkg')
```
:::
:::
:::

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
Use a 'fully qualified variable reference' in the code below `R/`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true
pkg::fun()
```
:::
:::
:::

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
Use `@importFrom` if an object can't be imported with `::` (i.e., an operator)
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true
#' @importFrom rlang .data
```
:::
:::
:::

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
Use the `@import` tag if your code uses ***a lot*** of functions from a package
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true
#' @import shiny
```
:::
:::
:::

## Dependencies: imports cont.

:::: footer
[Branch: `08b_pkg-imports`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.90em;"}
-   `document()` writes the `NAMESPACE` (**not the `DESCRIPTION`**)

<br>

-   All packages in `NAMESPACE` must be in `DESCRIPTION`
:::
:::

:::{.column width="60%"}
![](img/roxygen2_document_description.png){width="80%"}
:::
:::

. . .

I highly recommend reading [Confusion about imports](https://r-pkgs.org/dependencies-in-practice.html#confusion-about-imports) in [R packages, 2ed](https://r-pkgs.org/)

## Dependencies: recap

:::: footer
[Branch: `08b_pkg-imports`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

::: columns
:::{.column width="40%"}
Updates to `NAMESPACE`
:::

:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
```{bash}
#| eval: false 
#| echo: true
# Generated by roxygen2: do not edit by hand

export(movies_app)
export(scatter_plot)
import(shiny)
importFrom(rlang,.data)
```
:::
:::
:::

. . .

<br>

::: columns
:::{.column width="40%"}
Updates to `DESCRIPTION`
:::

:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
```{bash}
#| eval: false 
#| echo: true
Imports: 
    ggplot2,
    rlang,
    shiny,
    shinythemes,
    stringr
```
:::
:::
:::

## Data

:::: footer
[Branch: `09_data`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

There are three locations for data in your app-package:

<br>

. . .

<br>

::: columns
:::{.column width="33%"}
:::{style="font-size: 1.40em;"}
**`data/`**
:::
:::

:::{.column width="33%"}
:::{style="font-size: 1.40em;"}
**`data-raw/`**
:::
:::

:::{.column width="33%"}
:::{style="font-size: 1.40em;"}
**`inst/extdata/`**
:::
:::
:::

## Data: package data

:::: footer
[Branch: `09_data`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 1.20em;"}
**`data/`**
:::

:::{style="font-size: 0.90em;"}
-   Contains package data
:::
:::

:::{.column width="40%"}
:::
:::

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
-   Accessible via namespace (i.e., `pkg::data`) or `data()` function
:::
:::

:::{.column width="40%"}
:::
:::

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
-   Add data files to data with `usethis::use_data()`
:::
:::

:::{.column width="40%"}
:::{style="font-size: 0.90em;"}
```{bash}
#| eval: false 
#| echo: true
data
  ├── movies.RData
  └── movies.rda

1 directory, 2 files
```
:::
:::
:::

## Data: raw data files

:::: footer
[Branch: `09_data`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 1.20em;"}
**`data-raw/`**
:::
:::

:::{.column width="40%"}
:::
:::

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
-   Scripts and files used to create data in `data/`
:::
:::

:::{.column width="40%"}
:::
:::

. . .

::: columns
:::{.column width="70%"}
:::{style="font-size: 0.90em;"}
-   Create `data-raw` files with `usethis::use_data_raw()`
:::
:::

:::{.column width="30%"}
:::
:::

. . .

::: columns
:::{.column width="60%"}
:::{style="font-size: 0.90em;"}
-   For example, the scripts used to create `movies.RData` *might* look like:
:::
:::

:::{.column width="40%"}
<br>

:::{style="font-size: 0.80em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2|"
data-raw
  ├── all.csv
  ├── movies.csv
  ├── pull_rotten_data.R
  ├── rotten.R
  └── scrape_boxoffice.R

1 directory, 5 files
```
:::
:::
:::

## Data: external data files

:::: footer
[Branch: `09_data`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 1.20em;"}
**`inst/extdata/`**
:::
:::

:::{.column width="50%"}
:::
:::

. . .

:::: columns
:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
-   `inst/extdata` can be used for external datasets in other file formats (`.csv`, `.sas7bdat`, `.txt`, `.xlsx`, etc)
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "2-3"
inst/
└── extdata
    └── movies.fst

2 directories, 1 file
```
:::
:::

::::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.90em;"}
-   Import these files with the `system.file()` file path accessor function
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "2"
fst::read_fst(path = 
      system.file("extdata/", "movies.fst", 
                  package = "moviesApp")
    )
```
:::
:::

::::

## Using system.file()

:::: footer
[Branch: `09_data`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="31%"}
:::{style="font-size: 0.80em;"}
`system.file()` gives us access to the contents of our *installed* package
:::
:::

:::{.column width="35%"}

:::{style="font-size: 0.70em;"}
"*This is your package.*"
:::

:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|1,2,3,6|4,5,10,11,12,13|"
├── DESCRIPTION
├── NAMESPACE
├── R
├── README.md
├── app.R
├── data
├── inst
│   └── extdata
│       └── movies.fst
├── man
├── moviesApp.Rproj
└── www
    └── shiny.png
```
:::
:::

:::{.column width="33%"}

:::{style="font-size: 0.70em;"}
"*This is your package, installed*"
:::

:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|1,4,5,6|2,3,9,10|7,8,11,12|"
├── DESCRIPTION
├── INDEX
├── Meta
├── NAMESPACE
├── R
├── data
├── extdata
│   └── movies.fst
├── help
└── html
```
:::
:::

::::

. . .

:::{style="font-size: 0.80em;"}
> "*The contents of the `inst/` subdirectory will __be copied recursively to the installation directory__.*" - [Writing R extensions, Package subdirectories](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Package-subdirectories) 
:::

# Ready

. . .

[BREAK!]{style="font-weight: bold; font-size: 1.60em;"}

# App-packages

The next section covers practices specific to app-packages.

<br>

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.85em;"}

- Launching apps  

  -  `app.R`
  
  -  Standalone app function
  
:::
:::

:::{.column width="50%"}

:::{style="font-size: 0.85em;"}

- External resources  

  - `www/`
  
  - App UI function arguments  
  
  - `dev/` and `prod/` apps    

:::
:::
::::

## Launching apps

:::: footer
[Branch: `10_launch-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

There are two common methods for launching Shiny apps:

<br>

. . .

:::: columns
:::{.column width="55%"}
:::{style="font-size: 1.10em;"}
A standalone app function:
:::

<br>

:::{style="font-size: 0.90em;"}
```{verbatim}
moviesApp/
  └── R/
      └── movies_app.R
```
:::
:::

:::{.column width="45%"}
:::{style="font-size: 1.10em;"}
An `app.R` file: 
:::

<br>

:::{style="font-size: 0.90em;"}
```{verbatim}
moviesApp/
  └── app.R
```
:::
:::

::::

## Launching apps: movies_app()

:::: footer
[Branch: `10_launch-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

What should go in the standalone app function?

<br>

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.85em;"}
Check for `interactive()`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "1,3,5|"
if (interactive()) { 
    # define interactive behavior
  } else {
    # define non-interactive behavior
  }
```
:::
:::

::::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.85em;"}
Include argument for Shiny `options`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|5|"
movies_app <- function(options = list()) {
    shinyApp(
      ui = movies_ui(), 
      server = movies_server,
      options = options
    )
}
```
:::
:::

::::

## Launching apps: display_type()

:::: footer
[Branch: `10_launch-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

The `display_type()` is a helper function that controls where the application is launched.

<br>

. . .

::: columns
:::{.column width="25%"}
:::{style="font-size: 0.75em;"}
Has options for **`v`**iewer pane, **`w`**indow, and **`b`**rowser.

<br>

Prints option to the **Console**
:::
:::

:::{.column width="75%"}
:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|1|2-10|11-15|"
display_type <- function(run = "w") {
  if (run == "p") {
    options(shiny.launch.browser = .rs.invokeShinyPaneViewer)
  } else if (run == "b") {
    options(shiny.launch.browser = .rs.invokeShinyWindowExternal) 
  } else if (run == "w") {
    options(shiny.launch.browser = .rs.invokeShinyWindowViewer) 
  } else {
    options(shiny.launch.browser = NULL)
  }
    shinyViewerType <- getOption('shiny.launch.browser') |> 
                        attributes() |> 
                        unlist() |> 
                        unname()
    cli::cli_alert_info("shinyViewerType set to {shinyViewerType}")
}
```
:::
:::

::::

## Launching apps: movies_app()

:::: footer
[Branch: `10_launch-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

Include `display_type()` if `movies_app()` is interactive 

<br>

. . .

:::: columns

:::{.column width="25%"}
:::{style="font-size: 0.75em;"}
Include default `run` argument to your preference
:::
:::

:::{.column width="75%"}
:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3|5-9|8|"
movies_app <- function(options = list(), run = "p") {
  if (interactive()) {
    display_type(run = run)
  }
    shinyApp(
      ui = movies_ui(),
      server = movies_server,
      options = options
    )
}
```
:::
:::

::::

## Launching apps: app.R

:::: footer
[Branch: `10_launch-app`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
What should go in `app.R`?
:::

<br>

. . .

:::: columns

:::{.column width="28%"}
:::{style="font-size: 0.75em;"}
Turn off `loadSupport()`

<br>

Load package 

<br>
<br>
<br>
<br>

Include Shiny `options`
:::
:::

::::{.column width="72%"}

:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|1,17|2-11|12-14|15-16|"
withr::with_options(new = list(shiny.autoload.r = FALSE), code = {
  if (!interactive()) {
    sink(stderr(), type = "output")
    tryCatch(
      expr = {
        library(moviesApp)
      },
      error = function(e) {
        pkgload::load_all()
      }
    )
  } else {
    pkgload::load_all()
  }
    moviesApp::movies_app(
      options = list(test.mode = TRUE), run = 'p')
})
```
:::
:::

::::

## External resources

:::: footer
[Branch: `11a_inst-www`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

We have external files referenced in our UI (i.e., in `www`)

<br>

. . .

:::: columns

:::{.column width="33%"}
:::{style="font-size: 0.80em;"}

To include in our app-package, we need to move `www/` (and contents) into `inst/`

:::
:::

:::{.column width="33%"}
:::{style="font-size: 0.80em;"}

Previous location:

```{verbatim}
├── inst/
│   └── extdata
│       └── movies.fst
└── www/
    └── shiny.png
```
:::
:::

:::{.column width="33%"}
:::{style="font-size: 0.80em;"}

Current location: 

```{verbatim}
inst/
  ├── extdata/
  │   └── movies.fst
  └── www/
      └── shiny.png
```
:::
:::
::::

. . .

<br>

After loading, documenting, and installing, we can access `shiny.png` with `system.file()`

## External files: www/

:::: footer
[Branch: `11a_inst-www`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

Adding external files (formerly in `www`)

. . .

<br>

:::: columns

:::{.column width="40%"}
:::{style="font-size: 0.70em;"}
-   In the app UI function, include a call to `addResourcePath()` 
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.67em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2,3|"
movies_ui <- function() {
  addResourcePath(prefix = , 
                  directoryPath = )
  tagList() # Additional UI code
}
```
:::
:::

::::

<br>

. . .

:::: columns

:::{.column width="40%"}
:::{style="font-size: 0.70em;"}
-   Use `system.file()` to add the `www` path
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.67em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|1|"
directoryPath = system.file('www', 
                    package = 'moviesApp')
```
:::
:::

::::

. . .

<br>

::: columns
:::{.column width="40%"}
:::{style="font-size: 0.70em;"}
-   Reference the file (without `inst/`)
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.67em;"}
```{r}
#| eval: false 
#| echo: true
img(src = "www/shiny.png")
```
:::
:::
:::

## External files: bslib

:::: footer
[Branch: `11b_inst-bslib`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

`inst/` can store alternate images and resources

<br>

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
-   Add image to `inst/www`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true
inst
 └── www
      ├── bootstrap.png
      └── shiny.png
  
2 directories, 2 files
```
:::
:::
:::

. . .

<br>

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
-   In UI, `addResourcePath()` has already added `www/`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
img("www/bootstrap.png")
```
:::
:::
:::

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
-   Add `bslib` argument to `movies_ui()`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
movies_app(options = list(test.mode = TRUE), 
  run = 'p', 
  bslib = TRUE)
```
:::
:::
:::

## External files: dev

:::: footer
[Branch: `11c_inst-dev`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

We can also store entire apps in `inst/`

<br>

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
`inst/dev/`:

-   `app.R` (app file)
-   `imdb.png` (image file)
-   `tidy_movies.fst` (data)
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
<br>

```{verbatim}
inst/dev
├── app.R
├── imdb.png
└── tidy_movies.fst

1 directory, 3 files
```
:::
:::
:::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
-   Functions from `R/` are accessible in `inst/dev/app.R`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
moviesApp::mod_var_input_server("vars")
```
:::
:::

::::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.80em;"}

-   Write an alternate standalone app function
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
ggp2_movies_app(
  options = list(test.mode = FALSE), 
  run = 'p')
```
:::
:::

::::

## External files: prod

:::: footer
[Branch: `11d_inst-prod`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

Apps can be deployed from a dedicated `inst/` folder

. . .

<br>

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
In `inst/prod/app/app.R`
:::

:::{style="font-size: 0.80em;"}
```{r}
#| eval: false 
#| echo: true
shinyApp(
  ui = moviesApp::movies_ui(bslib = TRUE), 
  server = moviesApp::movies_server)
```
:::

:::

:::{.column width="50%"}

<br>

:::{style="font-size: 0.70em;"}
```{verbatim}
inst/
  └── prod/
       └── app/
            └── app.R
          
3 directories, 1 file
```
:::


:::

::::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.70em;"}
-   in `app.R`, use `shinyAppDir()` and `system.file()` to return the app object from `prod/app/app.R`
:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.67em;"}

```{r}
#| eval: false 
#| echo: true
shinyAppDir(appDir = system.file("prod/app", 
                            package = "moviesApp"))
```
:::
:::
::::

. . .

[App](https://mjfrigaard.shinyapps.io/moviesApp-prod/)

# Ready

[BREAK!]{style="font-weight: bold; font-size: 1.60em;"}

# Tests

<br>

. . .

::: columns
:::{.column width="50%"}
:::{style="font-size: 0.80em;"}

Recap: Package stuff 

- [x]   `roxygen2` & dependencies 

- [x]   Data

- [x]   Launching apps 

- [x]   External resources 

:::
:::

:::{.column width="50%"}
:::{style="font-size: 0.80em;"}
The following sections will cover:

1.  Setting up your test suite

2.  Test fixtures and helpers

3.  Testing modules and system tests
:::
:::

::::

## Test suite

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

Setting up your `testthat` test suite:

. . .

<br>

. . .

::: columns
:::{.column width="33%"}
:::{style="font-size: 0.90em;"}

```{r}
#| eval: false 
#| echo: true
usethis::use_testthat(3)
```

:::
:::

:::{.column width="33%"}

:::

:::{.column width="33%"}
:::{style="font-size: 0.80em;"}
*`3` is '3rd edition'* 
:::
:::
:::

. . .

::: columns
:::{.column width="5%"}
:::{style="font-size: 0.90em;"}

:::
:::

:::{.column width="95%"}
:::{style="font-size: 0.90em;"}
- [x] In the `DESCRIPTION` file, `testthat (>= 3.0.0)` is listed under `Suggests`
:::
:::
:::

. . .

::: columns
:::{.column width="5%"}
:::{style="font-size: 0.90em;"}

:::
:::

:::{.column width="95%"}
:::{style="font-size: 0.90em;"}
- [x]   `Config/testthat/edition: 3` is also listed in the  `DESCRIPTION` to specify the `testthat` edition
:::
:::
:::

. . .

::: columns
:::{.column width="5%"}
:::{style="font-size: 0.90em;"}

:::
:::

:::{.column width="95%"}
:::{style="font-size: 0.90em;"}
- [x]   A new `tests/` folder is created, with a `testthat/` subfolder
:::
:::
:::

. . .

::: columns
:::{.column width="5%"}
:::{style="font-size: 0.90em;"}

:::
:::

:::{.column width="95%"}
:::{style="font-size: 0.90em;"}
- [x]   The `tests/testthat/testthat.R` file is created 
:::
:::
:::

## New tests

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

For every `.R` file in `R/` ...

. . .

<br>

::: columns

:::{.column width="30%"}
:::{style="font-size: 0.75em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2"
R/
└── scatter_plot.R

1 directory, 1 file
```
:::
:::

:::{.column width="30%"}
:::{style="font-size: 0.75em;"}
```{r}
#| eval: false 
#| echo: true
use_test("scatter_plot")
```
:::
:::

:::{.column width="39%"}
:::{style="font-size: 0.72em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3"
tests/
 └── testthat/
      └── test-scatter_plot.R

1 directory, 1 file
```
:::
:::
:::

. . .

<br>

...create a test file in `tests/testthat/`

## Test files

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="35%"}
:::{style="font-size: 0.75em;"}

[`test-`  files]{style="font-size: 1.30em;"}

:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.75em;"}
```{bash}
#| eval: false 
#| echo: true
✔ Writing 'tests/testthat/test-scatter_plot.R'
• Modify 'tests/testthat/test-scatter_plot.R'
```
:::
:::

::::

. . .

<br>

:::: columns

:::{.column width="35%"}
:::{style="font-size: 0.75em;"}

[`test_that()` tests]{style="font-size: 1.30em;"}

:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.75em;"}

```{r}
#| eval: false
#| echo: true
test_that(desc = "multiplication works", code = { 
 
})
```

:::
:::

::::

. . .

<br>

:::: columns

:::{.column width="35%"}
:::{style="font-size: 0.75em;"}

[`expect_`ations]{style="font-size: 1.30em;"}

:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.75em;"}

```{r}
#| eval: false
#| echo: true
expect_equal( 
  object = 2 * 2,  
  expected = 4 
  ) 
```

:::
:::

::::

## Running tests

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="35%"}
:::{style="font-size: 1.05em;"}

**Build** pane

:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.75em;"}

![](img/test_build_pane.png){width='70%' fig-align='center'}

:::
:::

::::

. . .

:::: columns

:::{.column width="55%"}
:::{style="font-size: 0.95em;"}

[`test()`]{style="font-weight: bold; font-size: 0.95em"}

:::
:::

:::{.column width="45%"}
:::{style="font-size: 0.95em;"}

[Ctrl/Cmd + Shift + T]{style="font-weight: bold; color: #89D6FB;"}

:::
:::

::::

. . .

:::: columns

:::{.column width="55%"}
:::{style="font-size: 0.95em;"}

[`test_active_file()`]{style="font-weight: bold; font-size: 0.95em"}

:::
:::

:::{.column width="45%"}
:::{style="font-size: 0.95em;"}

[Ctrl/Cmd + T]{style="font-weight: bold; color: #89D6FB;"}

:::
:::

::::

. . .

:::: columns

:::{.column width="55%"}
:::{style="font-size: 0.95em;"}

[`test_coverage_active_file()`]{style="font-weight: bold; font-size: 0.95em"}

:::
:::

:::{.column width="45%"}
:::{style="font-size: 0.95em;"}

[Ctrl/Cmd + Shift + R]{style="font-weight: bold; color: #89D6FB;"}

:::
:::

::::


## App specifications

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 0.90em;"}
Applications *should* have some version of the following specifications:
:::

. . .

<br>

::: columns
:::{.column width="35%"}
:::{style="font-size: 0.90em;"}
User specifications
:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.90em;"}
Capture the **needs and expectations** of the end-user
:::
:::
:::

. . .

::: columns
:::{.column width="35%"}
:::{style="font-size: 0.90em;"}
Features
:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.90em;"}
Describe the high-level **capabilities** of the application
:::
:::
:::

. . .

::: columns
:::{.column width="35%"}
:::{style="font-size: 0.90em;"}
Functional requirements
:::
:::

:::{.column width="65%"}
:::{style="font-size: 0.90em;"}
The **testable, specific behaviors** 
*(i.e., inputs and outputs)*
:::
:::
:::

## Test specifications

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 0.90em;"}
A traceability matrix is a table that 'traces' the user specifications to features and functional requirements (and the tests they give rise to)
:::

. . .

<br>

:::{style="font-size: 0.70em;"}

|                                                                              |                                                                                                                |                                                                                                                                                                     |       |
|-------------------|----------------------|---------------------|---------|
| User Specifications                                                          | Features                                                                                                       | Requirements                                                                                                                                                        | Tests |
| **US1**: Shiny App Scatter Plot Data Visualization for Movie Review Explorer | **F1.1**: IMDB and Rotten Tomatoes data with continuous (i.e., scores) and categorical (i.e., mpaa) variables. | **FR 1.1**: The app should display movie review data from IMDB and Rotten Tomatoes containing both continuous and categorical variables stored in a tabular format. | ?     |
|                                                                              |                                                                                                                |                                                                                                                                                                     |       |


:::

## Behavior-driven development tests

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

In Behavior-driven development (BDD), requirements are written plain language ‘feature files’ using a series of keywords:

. . .

<br>

:::{style="font-size: 0.90em;"}
```{bash}
#| eval: false
#| echo: true
#| code-line-numbers: "1|3|4|6-10|"
Feature: < High-level description of capability >

  Background: < Steps or conditions that exist before each scenario >
    Given < Initial context or preconditions for the scenario >
    
  Scenario: < Steps outlining a concrete example to illustrate the feature >
    When
    And
    Then

```
:::

## _Describe_ features & background

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
The `Feature` and `Background` can be included in nested `testthat::describe()` blocks
:::

. . .

<br>

:::{style="font-size: 0.80em;"}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "|2|3-5|8|9|"
testthat::describe(
  "Feature: < High-level description of capability >
      As a 
      I want 
      So that", code = {
  
    testthat::describe(
      "Background: < Preconditions >
         Given < Initial context for scenario >", code = { 
    
  })
})
```
:::

## Write a test for _it_

:::: footer
[Branch: `12a_tests-specs`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
For `Scenario`s, each `Then` keyword should have a corresponding `testthat::it()` or `testthat::test_that()`
:::

<br>

. . .

:::{style="font-size: 0.85em;"}
```{r}
#| eval: false
#| echo: true
#| code-line-numbers: "1|2|3|4|5|7-10|"
testthat::it("
  Scenario: < Steps outlining a concrete example to illustrate the feature >
    Given ...
    When ...
    Then", 
  code = {
    # test code 
    testthat::expect_equal(
      object = x, 
      expected = y)
})
```
:::

## Test fixtures

:::: footer
[Branch: `12b_tests-fixtures`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::{style="font-size: 0.85em;"}
*Test fixtures can be anything used to create repeatable test conditions (data, file paths, functions, etc.)*
:::

<br>

. . .

::: columns
:::{.column width="40%"}

:::{style="font-size: 0.85em;"}

- Fixtures provide a consistent, well-defined test environment

- Are removed/destroyed when the test is executed

:::

:::

:::{.column width="60%"}

<br>

:::{style="font-size: 0.95em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3"
tests/
  ├── testthat/
  │   └── fixtures/                                         
  └── testthat.R
```
:::
:::
:::

## Feature description for fixture

:::: footer
[Branch: `12b_tests-fixtures`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.85em;"}
We can use nested `describe()` functions to document the `Feature` and `Background`
:::

<br>

. . .

:::: columns

:::{.column width="7%"}
:::


:::{.column width="86%"}

:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|2-3|4-5|8,9,10,11|"
testthat::describe(
    "Feature: Scatter plot data visualization
       As a film data analyst
       I want to explore movie review data from IMDB.com
       So that I can analyze relationships between movie reivew metrics",
  code = {
  testthat::describe(
    "Background:
       Given I have data with IMDB movie reviews
       And the data contains continuous variables like 'rating'
       And the data contains categorical variables like 'mpaa'",
    code = {
         
      })
    })
```
:::

:::

:::{.column width="7%"}
:::

::::

## Give a concrete scenario

:::: footer
[Branch: `12b_tests-fixtures`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.85em;"}
Illustrate the test with clear `Given`, `When`, `Then` steps 
:::

<br>

. . .

:::: columns

:::{.column width="7%"}
:::


:::{.column width="86%"}
:::{style="font-size: 0.80em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3|4|5-9|"
testthat::it(
  "Scenario: Create scatter plot
      Given I have launched the movie review exploration app,
      When the scatter plot renders,
      Then the points on the x axis should represent 'Ratings'
      And the points on the y axis should represent 'Length'
      And the points should be colored by 'MPAA' rating
      And the size of the points should be set to '2'
      And the opacity of the points should be set to '0.5'", 
    code = {
      
  })
```
:::
:::

:::{.column width="7%"}
:::

::::

## Example fixture: data

:::: footer
[Branch: `12b_tests-fixtures`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

:::: columns

:::{.column width="45%"}

:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|4|"
tests
├── testthat
│   ├── fixtures
│   │   └── make-tidy_ggp2_movies.R
│   └── test-scatter_plot.R
└── testthat.R
```
:::

:::

:::{.column width="55%"}
:::{style="font-size: 0.85em;"}
- `make-tidy_ggp2_movies`: code used to create a ‘tidy’ version of the `ggplot2movies::movies` data 
:::
:::

::::

. . .

<br>

:::: columns

:::{.column width="45%"}

:::{style="font-size: 0.70em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|5|"
tests
├── testthat
│   ├── fixtures
│   │   ├── make-tidy_ggp2_movies.R
│   │   └── tidy_ggp2_movies.rds
│   └── test-scatter_plot.R
└── testthat.R
```
:::

:::

:::{.column width="55%"}
:::{style="font-size: 0.85em;"}

- `tidy_ggp2_movies.rds` the output dataset 
:::
:::

::::


## Write a fixture test

:::: footer
[Branch: `12b_tests-fixtures`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

:::{style="font-size: 0.85em;"}
Write a test using the static data test fixture 
:::

<br>

. . .

:::: columns

:::{.column width="15%"}

:::


:::{.column width="85%"}

:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|1-6|7-8|9-14|15|"
  ggp2_scatter_inputs <- list(x = "rating",
                              y = "length",
                              z = "mpaa",
                              alpha = 0.75,
                              size = 3,
                              plot_title = "Enter plot title")
  tidy_ggp2_movies <- readRDS(test_path("fixtures",
                              "tidy_ggp2_movies.rds"))
    app_graph <- scatter_plot(tidy_ggp2_movies,
      x_var = ggp2_scatter_inputs$x,
      y_var = ggp2_scatter_inputs$y,
      col_var = ggp2_scatter_inputs$z,
      alpha_var = ggp2_scatter_inputs$alpha,
      size_var = ggp2_scatter_inputs$size)
    expect_true(ggplot2::is.ggplot(app_graph))
```
:::

:::

::::

## Test helpers

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}

> "*Helper files are a mighty weapon in the battle to eliminate code floating around at the top-level of test files.*" [Testthat helper files, R Packages, 2ed](https://r-pkgs.org/testing-design.html#testthat-helper-files)

:::

<br>

. . .

:::: columns

:::{.column width="60%"}

:::{style="font-size: 0.85em;"}
```{bash}
#| eval: false 
#| echo: true
#| code-line-numbers: "|6|"
tests/
  ├── testthat/
  │   ├── fixtures/
  │   │   ├── make-tidy_ggp2_movies.R
  │   │   └── tidy_ggp2_movies.rds
  │   ├── helper.R
  │   └── test-scatter_plot.R
  └── testthat.R
```
:::

:::

:::{.column width="40%"}
:::{style="font-size: 0.85em;"}
Store test helpers in `tests/testthat/helper.R` files.
:::
:::

::::

## Example test helper

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
Consider the inputs passed to the `scatter_plot()` function in the previous test:
:::

<br>

. . .

:::: columns

:::{.column width="59%"}
:::{style="font-size: 0.69em;"}
```{r}
#| eval: false 
#| echo: true
ggp2_scatter_inputs <- list(x = "rating",
                            y = "length",
                            z = "mpaa",
                            alpha = 0.75,
                            size = 3,
                            plot_title = "Enter plot title")
```
:::
:::

:::{.column width="41%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: true 
#| echo: true
var_inputs <- function() {
 list(x = "rating",
      y = "length",
      z = "mpaa",
      alpha = 0.75,
      size = 3,
      plot_title = "Enter plot title")
}
```
:::
:::

::::

. . .

:::{style="font-size: 0.90em;"}
We could write `var_inputs()` to store these values in a list
:::

## Example test helper

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
This would allow us to use `var_inputs()` with the same ‘reactive syntax’ we use in the module server function
:::

<br>

. . .

:::: columns

:::{.column width="42%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: true 
#| echo: true
#| collapse: true
str(var_inputs())
```
:::
:::

:::{.column width="58%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "|3-7|"
app_graph <- scatter_plot(
  tidy_ggp2_movies,
  x_var = var_inputs()$x,
  y_var = var_inputs()$y,
  col_var = var_inputs()$z,
  alpha_var = var_inputs()$alpha,
  size_var = var_inputs()$size)

expect_true(ggplot2::is.ggplot(app_graph))
```
:::
:::

::::

. . .

<br>

:::{style="font-size: 0.90em;"}
This removes duplicated code, but it's not clear for the reader what `var_inputs()` contains or where it comes from 
:::


## Test helpers & the DRY principle

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

If you have repeated code in your tests, consider the following questions below before creating a helper function:

<br>

. . .

*Does the code help explain what behavior is being tested?*

<br>

. . .

*Would a helper make it harder to debug the test when it fails?*

<br>

. . .

It’s more important that test code is obvious than DRY, because it’s **more likely you’ll be dealing with this test when it fails** (and you’re not likely to remember why all the top-level code is there)

## Better test helper

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
`make_ggp2_inputs()` creates inputs for the `scatter_plot()` utility function
:::

<br>

:::: columns

:::{.column width="55%"}
:::{style="font-size: 0.80em;"}

```{r}
#| eval: false 
#| echo: true
make_ggp2_inputs <- function() {
  glue::glue_collapse("list(x = 'rating',
     y = 'length',
     z = 'mpaa',
     alpha = 0.75,
     size = 3,
     plot_title = 'Enter plot title'
     )"
  )
}
```

:::
:::

:::{.column width="45%"}
:::{style="font-size: 0.90em;"}
This reduces the number of keystrokes per test, but doesn’t obscure the source of the values.
:::
:::

::::

## Test output

:::: footer
[Branch: `12c_tests-helpers`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

The [`logger` package](https://daroczig.github.io/logger/) is great for verbose test output. 

. . .

<br>

::: columns

:::{.column width="40%"}
:::{style="font-size: 0.80em;"}
-  `test_logger()` can be used to log when a test `starts` and `ends`
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.70em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "1-2|4-5|7-8|"
test_logger(start = "Test number", 
  msg = "Short description of functional requirement")

# test code (fixtures, helpers, etc.)
# expectations

test_logger(end = "Test number", 
  msg = "Short description of functional requirement")
```
:::
:::

::::

. . .

<br>

::: columns

:::{.column width="40%"}
:::{style="font-size: 0.80em;"}
Store common test utilities in `R/`:
:::
:::

:::{.column width="60%"}
:::{style="font-size: 0.70em;"}
```{verbatim}
#| eval: false 
#| echo: true
R/
└── testthat.R
```
:::
:::

::::


## Testing modules

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

We want tests for specific module behaviors (i.e., communicating or transferring values) 

. . .

<br>

:::{style="font-size: 0.80em;"}

> *"Are the user inputs from the variable input module being passed to scatter-plot display module?"*

:::

<br>


:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|3|5|"
movies_server <- function(input, output, session) {

      selected_vars <- mod_var_input_server("vars")

      mod_scatter_display_server("plot", var_inputs = selected_vars)
      
}
```
:::

## Module behaviors 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

What scenarios call for a snapshot test? 

. . .


<br>

:::{style="font-size: 0.69em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "2|3|4-8"
  testthat::it("Scenario: Scatter plot initial x, y, color values 
                   Given the movie review application is loaded
                   When I view the initial scatter plot
                   Then the scatter plot should show 'IMDB Rating' on the x-axis
                   And the scatter plot should show 'Audience Score' on the y-axis
                   And the points on the scatter plot should be colored by 'MPAA Rating'
                   And the size of the points should be set to '2'
                   And the opacity of the points should be set to '0.5'", code = {
```
:::

. . .

:::{style="font-size: 0.69em;"}
```{r}
#| eval: false 
#| echo: true
#| code-line-numbers: "2|3-5|6-8"
  testthat::it("Scenario: Change x, y, color values for plotting
                  Given the movie review application is loaded
                  When I choose the variable 'IMDB number of votes' for the x-axis
                  And I choose the variable 'Critics Score' for the y-axis
                  And I choose the variable 'Genre' for the color
                  Then the scatter plot should show 'IMDB number of votes' on the x-axis
                  And the scatter plot should show 'Critics Score' on the y-axis
                  And the points on the scatter plot should be colored by 'Genre'", code = {
```
:::



## Testing modules: returned values 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="40%"}

<br>

:::{style="font-size: 0.70em;"}

Values from `mod_var_input_ui()` are passed to `setInputs()` 

:::

<br>

:::{style="font-size: 0.70em;"}

Compare with `session$returned()`

:::

:::


:::{.column width="60%"}
:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "1|2-8|9-17|"
shiny::testServer(app = mod_var_input_server, expr = {
      # set inputs
      session$setInputs(y = "imdb_rating",
                        x = "audience_score",
                        z = "mpaa_rating",
                        alpha = 0.5,
                        size = 2,
                        plot_title = "Enter plot title")
      # test against inputs in mod_var_input_ui()
      testthat::expect_equal(object = session$returned(),
        expected = list(y = "imdb_rating",
                        x = "audience_score",
                        z = "mpaa_rating",
                        alpha = 0.5,
                        size = 2,
                        plot_title = "Enter plot title"))
})
```
:::
:::

::::



## Testing modules: returned values 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

We know the values are being returned from `mod_var_input_server()`

. . .

<br>

:::{style="font-size: 0.80em;"}

> *"how can we test if the reactive values (`selected_vars`) are passed into `mod_scatter_display_server()`?"*

:::

. . .

<br>


:::{style="font-size: 0.90em;"}
```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "3|5"
movies_server <- function(input, output, session) {

      selected_vars <- mod_var_input_server("vars")

      mod_scatter_display_server("plot", var_inputs = selected_vars)
      
}
```
:::

## Testing modules: reactive inputs 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

. . .

:::: columns

:::{.column width="40%"}

<br>

:::{style="font-size: 0.80em;"}

If we pass the values from the variable input module to `args = list()`, we get an error:

:::

:::


:::{.column width="60%"}
:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|1|3-8|"
shiny::testServer(app = mod_scatter_display_server,
  args = list(var_inputs = 
        list(x = "critics_score",
            y = "imdb_rating",
            z = "mpaa_rating",
            alpha = 0.5,
            size = 2,
            plot_title = "Enter Plot Title")), expr = {
    testthat::expect_equal(object = inputs(),
      expected = list(x = "critics_score",
                      y = "imdb_rating",
                      z = "mpaa_rating",
                      alpha = 0.5,
                      size = 2,
                      plot_title = "Enter Plot Title"))
})
```
:::
:::

::::

. . .

<br>

:::{style="font-size: 0.70em;"}

```{verbatim}
[ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]

── Error (test-mod_scatter_display.R:29:13): ──
Error in `var_inputs()`: could not find function "var_inputs"
```

:::

## Testing modules: reactive inputs 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

:::{style="font-size: 0.90em;"}

We can fix this by simulating how `selected_vars` is used in `testServer()`

:::

<br>

. . .

:::: columns

:::{.column width="40%"}

:::{style="font-size: 0.70em;"}

If we wrap the values in `reactive()` and pass them as `var_inputs` to `args`, this simulates the reactive values in `selected_vars`

:::

<br>

:::{style="font-size: 0.70em;"}

`inputs()` is the object used to create the graph in the call to `renderPlot()`

:::

:::


:::{.column width="60%"}
:::{style="font-size: 0.65em;"}
```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|1|2-9|10|11-17|"
shiny::testServer(app = mod_scatter_display_server,
  args = list(var_inputs = 
      shiny::reactive(
        list(x = "critics_score",
            y = "imdb_rating",
            z = "mpaa_rating",
            alpha = 0.5,
            size = 2,
            plot_title = "Enter Plot Title"))), expr = {
    testthat::expect_equal(object = inputs(),
      expected = list(x = "critics_score",
                      y = "imdb_rating",
                      z = "mpaa_rating",
                      alpha = 0.5,
                      size = 2,
                      plot_title = "Enter Plot Title"))
})
```
:::
:::

::::

## Testing modules: how does this work? 

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
If pause execution with the debugger, we can see the difference:
:::

. . .

:::: columns

:::{.column width="50%"}
:::{style="font-size: 0.61em;"}

```{r}
#| eval: false 
#| echo: true 
Browse[1]> selected_vars
reactive({
    list(
      y = input$y, 
      x = input$x, 
      z = input$z, 
      alpha = input$alpha, 
      size = input$size, 
      plot_title = input$plot_title
      )
})
```

:::
:::


:::{.column width="50%"}
:::{style="font-size: 0.61em;"}

```{r}
#| eval: false 
#| echo: true 
Browse[1]> selected_vars()
$y
[1] "audience_score"

$x
[1] "imdb_rating"

$z
[1] "mpaa_rating"

$alpha
[1] 0.5

$size
[1] 2

$plot_title
[1] ""
```

:::
:::

::::

## Testing modules: reactive inputs

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

:::{style="font-size: 0.90em;"}
We can check other input values by passing them to `var_inputs` in `args = list()`
:::

. . .

<br>


:::: columns

:::{.column width="35%"}

:::{style="font-size: 0.80em;"}

These values simulate alternate user inputs being passed from the variable input module (as `selected_vars`)

:::

:::


:::{.column width="65%"}

:::{style="font-size: 0.72em;"}

```{r}
#| eval: false 
#| echo: true 
#| code-line-numbers: "|1|2-9|"
shiny::testServer(app = mod_scatter_display_server,
  args = list(var_inputs =
      shiny::reactive(
        list(x = "critics_score",
             y = "imdb_num_votes",
             z = "genre",
             alpha = 0.75,
             size = 3,
             plot_title = "New plot title"))), expr = {
})
```

:::

:::

::::

## Testing modules: outputs

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.80em;"}

> "*In terms of your testing strategy, you shouldn’t bother yourself with 'is Shiny generating the correct structure so that the plot will render in the browser?' That’s a question that the Shiny package itself needs to answer (and one for which we have our own tests).*"

:::

. . .


:::{style="font-size: 0.80em;"}

> "*The goal for your tests should be to ask 'is the code that I wrote producing the plot I want?' There are two components to that question:*
>
> 1. *Does the plot generate without producing an error?*
> 2. *Is the plot visually correct?*
>

:::

. . .

:::{style="font-size: 0.80em;"}

> *`testServer` is great for assessing the first component here.* - [Server Function Testing, Shiny Documentation](https://shiny.posit.co/r/articles/improve/server-function-testing/)

:::

## Testing modules: verifying outputs

:::: footer
[Branch: `12d_tests-modules`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

:::{style="font-size: 0.80em;"}
The outputs in the display module are handled by the `render*()` functions, so we need to verfiy ***'does the plot generate without producing an error?'***
:::



. . .

<br>

:::: columns

:::{.column width="40%"}

:::{style="font-size: 0.70em;"}

If we know how to subset the object rendered with `output$scatterplot`, we can test this for directly

:::

:::


:::{.column width="60%"}

:::{style="font-size: 0.62em;"}
```{r}
#| eval: false 
#| echo: true 
testthat::expect_equal(object = output$scatterplot[["alt"]],
                       expected = "Plot object")
```
:::

:::

::::

. . .

:::: columns

:::{.column width="40%"}

:::{style="font-size: 0.70em;"}

We can also build the graph in the display module and confirm with `is.ggplot()`

<br><br>

...or we can do a sanity check by passing `plot` to `print()`

:::

:::


:::{.column width="60%"}

:::{style="font-size: 0.62em;"}
```{r}
#| eval: false 
#| echo: true 
  plot <- scatter_plot(movies,
    x_var = inputs()$x,
    y_var = inputs()$y,
    col_var = inputs()$z,
    alpha_var = inputs()$alpha,
    size_var = inputs()$size) +
  ggplot2::labs(title = inputs()$plot_title,
    x = stringr::str_replace_all(tools::toTitleCase(
      inputs()$x), "_", " "),
    y = stringr::str_replace_all(tools::toTitleCase(
      inputs()$y), "_", " ")) +
  ggplot2::theme_minimal() +
  ggplot2::theme(legend.position = "bottom")
  testthat::expect_true(ggplot2::is.ggplot(plot))
```
:::

:::

::::


## System tests with shinytest2

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::


<br>

Setting up `shinytest2`: 

. . .

<br>

:::: columns

:::{.column width="35%"}

:::{style="font-size: 0.80em;"}

Install `shinytest2` and run `use_shinytest2()`

:::

:::{style="font-size: 0.70em;"}

```{r}
#| eval: false 
#| echo: true
install.packages('shinytest2')
library(shinytest2)
shinytest2::use_shinytest2()
```

:::

:::

:::{.column width="65%"}

:::{style="font-size: 0.70em;"}

- [x]   Adding `shinytest2::load_app_env()` to `tests/testthat/setup-shinytest2.R`

- [x]   Adding `*_.new.png` to `.gitignore`

- [x]   Adding `_\\.new\\.png$` to `.Rbuildignore`

- [x]   Setting active project to `/path/to/moviesApp`

- [x]   Adding `shinytest2` to `Suggests` field in `DESCRIPTION`

- [x]   Setting active project to `<no active project>`

:::

:::

::::


## shinytest2 setup

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

. . .

<br>

`shinytest2` installation checklist:

. . .

:::: columns

:::{.column width="40%"}

:::{style="font-size: 0.70em;"}

Verify you can create a new session with: 

```{r}
#| eval: false 
#| echo: true
library(chromote)
b <- ChromoteSession$new()
b$view()
```

:::

:::

:::{.column width="60%"}

![](img/verify_chromote.png){width='85%'}

:::

::::

## shinytest2: recording tests

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
Ideally we'd have one test recording [per feature.](https://youtu.be/EOVPBN5o8F8?si=-iWQIMwDeQ-WQQWv&t=693)
:::

<br>

. . .

:::{style="font-size: 0.85em;"}
```{verbatim}
Feature 1: Scatter plot data visualization dropdowns
     As a film data analyst
     I want to explore continuous and categorical variables in the movie review data
     So that I can analyze relationships between movie reivew metrics
```
:::


## shinytest2: recording tests

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.90em;"}
If we've been writing BDD scenarios, the tests are relatively easy to record: 
:::

<br>

. . .

:::{style="font-size: 0.85em;"}

```{verbatim}
  Scenario: Change dropdown values for plotting
     Given the movie review application is loaded
     When I choose the variable 'IMDB number of votes' for the x-axis
     And I choose the variable 'Critics Score' for the y-axis
     And I choose the variable 'Genre' for the color
     And I choose the size of the points to be 3
     And I choose the opacity of the points to be 0.7
```

:::


## shinytest2: recording features 

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="25%"}

:::{style="font-size: 0.67em;"}

```{r}
#| eval: false 
#| echo: true
shinytest2::record_test()
```

:::

:::

:::{.column width="75%"}

![](img/record_test.png){width='90%' fig-align='center'}

:::

::::

## shinytest2: test contents

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

. . .

:::: columns

:::{.column width="40%"}

:::{style="font-size: 0.70em;"}

Test file is saved in `tests/testthat/test-shinytest2.R`

<br><br>

The test file contains the contents of our scenario.

:::

:::


:::{.column width="60%"}

:::{style="font-size: 0.62em;"}
```{r}
#| eval: false 
#| echo: true 
library(shinytest2)

test_that("{shinytest2} recording: moviesApp-feature-01", {
  app <- AppDriver$new(name = "moviesApp-feature-01", 
                       height = 800, width = 1173)
  app$set_inputs(`vars-y` = "imdb_num_votes")
  app$set_inputs(`vars-x` = "critics_score")
  app$set_inputs(`vars-z` = "genre")
  app$set_inputs(`vars-alpha` = 0.7)
  app$set_inputs(`vars-size` = 3)
  app$set_inputs(`vars-plot_title` = "New plot title")
  app$expect_values()
})

```
:::

:::

::::

. . .

<br>


:::: columns

:::{.column width="20%"}

:::

:::{.column width="80%"}

:::{style="font-size: 0.70em;"}

```{verbatim}
   Then the scatter plot should show 'IMDB number of votes' on the x-axis
   And the scatter plot should show 'Critics Score' on the y-axis
   And the points on the scatter plot should be colored by 'Genre'
   And the size of the points on the scatter plot should be 3
   And the opacity of the points on the scatter plot should be 0.7
   And the title of the plot should be 'New Plot Title'
```

:::

:::

::::

## shinytest2: writing tests

:::: footer
[Branch: `12f_tests-system`]{style="font-weight: bold; font-size: 1.10em;"}
::::

<br>

:::{style="font-size: 0.80em;"}
We can create system tests using the feature and scenario descriptions, BDD functions, and `AppDriver$new()`
:::

. . .

<br>

:::: columns

:::{.column width="10%"}
:::

:::{.column width="80%"}

:::{style="font-size: 0.65em;"}

```{r}
#| eval: false 
#| echo: true 
testthat::describe("Feature 1: Scatter plot data visualization dropdowns
     ...", code = {
  testthat::it("Scenario: Change dropdown values for plotting
                 Given ...
                 When ...
                 Then ...", {
    app <- AppDriver$new(name = "moviesApp-feature-01", height = 800, width = 1173)
    app$set_inputs(`vars-y` = "imdb_num_votes")
    app$set_inputs(`vars-x` = "critics_score")
    app$set_inputs(`vars-z` = "genre")
    app$set_inputs(`vars-alpha` = 0.7)
    app$set_inputs(`vars-size` = 3)
    app$set_inputs(`vars-plot_title` = "New plot title")
    app$expect_values()
  })
})
```

:::

:::

:::{.column width="10%"}
:::

::::


## Recap

:::: footer
[Martin Frigaard | [Github](https://github.com/mjfrigaard) | [LinkedIn](https://www.linkedin.com/in/mjfrigaard/)]{style="font-size: 0.90em;"}
::::

:::: columns

:::{.column width="50%"}

Shiny App-Packages

:::{style="font-size: 0.75em;"}

- [x]   `DESCRIPTION` file and fields 

- [x]   `.Rproj` files and fields 

- [x]   `devtools` function workflow

- [x]   `roxygen2` & dependencies

- [x]   Data

:::

:::

:::{.column width="50%"}

<br>

:::{style="font-size: 0.75em;"}

- [x]   Launching apps 

- [x]   External resources 

- [x]   BDD tests, fixtures & helpers

- [x]   Testing modules & system tests

:::

:::

::::

. . .

:::: columns

:::{.column width="50%"}

Read more:

:::{style="font-size: 0.75em;"}

- [R packages, 2ed](https://r-pkgs.org/)

- [`shinytest2` documentation](https://rstudio.github.io/shinytest2/articles/shinytest2.html)

- [Shiny testing](https://shiny.posit.co/r/articles/improve/testing-overview/) (Shiny documentation) 

:::

:::

:::{.column width="50%"}

<br>

:::{style="font-size: 0.75em;"}

- [BDD in Action, 2ed](https://www.manning.com/books/bdd-in-action-second-edition)

- [Writing R Extensions](https://rstudio.github.io/r-manuals/r-exts/) 

- [Shiny App-packages](https://mjfrigaard.github.io/shinyap/) (in development)

:::

:::

::::


